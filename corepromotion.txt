@Test
    public void testGetAllPromotionsForPromotionCategory_Success() {
        // Arrange
        String schoolerCategoryIds = "123e4567-e89b-12d3-a456-426614174000";
        String processorSchoolerIds = "processor1";
        int schoolerCategoryVersion = 1;

        List<SchoolerCategory> schoolerCategoriesList = new ArrayList<>();
        SchoolerCategory category = new SchoolerCategory();
        category.setId(UUID.fromString(schoolerCategoryIds));
        schoolerCategoriesList.add(category);

        Map<String, List<PromotionsMappingResponse>> promotionMapFromCaas = new HashMap<>();
        promotionMapFromCaas.put(processorSchoolerIds, new ArrayList<>());

        when(schoolerCoreService.getSchoolerCategoriesList(schoolerCategoryVersion)).thenReturn(schoolerCategoriesList);
        when(campaignServiceClient.getAllPromotions(anyBoolean())).thenReturn(promotionMapFromCaas);

        // Act
        Map<String, List<SchoolerPromotion>> result = schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);

        // Assert
        assertNotNull(result);
    }

    @Test
    public void testGetAllPromotionsForPromotionCategory_NoSchoolerCategoryIdsAndProcessorSchoolerIds() {
        // Act & Assert
        assertThrows(DataValidationException.class, () -> {
            schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(null, null, 1);
        });
    }

    @Test
    public void testValidateSchoolerCategoryIds_InvalidUUID() {
        // Arrange
        String invalidUUID = "invalid-uuid";

        // Act & Assert
        ProcessingException exception = assertThrows(ProcessingException.class, () -> {
            schoolerPromotionCoreService.validateSchoolerCategoryIds(invalidUUID);
        });
        assertEquals(ErrorConstants.Promotions.INVALID_SCHOOLER_CATEGORY_ID, exception.getCode());
    }

    @Test
    public void testProcessPromotionsForSchoolerCategoryIds_NoSchoolerCategory() {
        // Arrange
        String schoolerCategoryIds = "123e4567-e89b-12d3-a456-426614174000";
        List<SchoolerCategory> schoolerCategoriesList = new ArrayList<>();
        Map<String, List<PromotionsMappingResponse>> promotionMapFromCaas = new HashMap<>();
        Map<String, List<SchoolerPromotion>> promotionsMap = new HashMap<>();

        // Act & Assert
        assertThrows(BusinessValidationException.class, () -> {
            schoolerPromotionCoreService.processPromotionsForSchoolerCategoryIds(schoolerCategoryIds, schoolerCategoriesList, promotionMapFromCaas, promotionsMap);
        });
    }
}
.........................................................
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class SchoolerPromotionCoreServiceTest {

    @Mock
    private SchoolerPromotionMapper schoolerPromotionMapper;

    @InjectMocks
    private SchoolerPromotionCoreService schoolerPromotionCoreService;

    @Test
    void testCreatePromotionsResponse() {
        // Arrange
        Map<String, List<PromotionsMappingResponse>> promotionMapFromCaas = new HashMap<>();
        List<PromotionsMappingResponse> promotionsMappingResponseList = new ArrayList<>();
        promotionsMappingResponseList.add(new PromotionsMappingResponse());
        promotionMapFromCaas.put("schoolerId", promotionsMappingResponseList);

        Map<String, List<SchoolerPromotion>> promotionsMap = new HashMap<>();

        when(schoolerPromotionMapper.mapCaasPromotionResponsesToSchoolerPromotions(promotionsMappingResponseList))
                .thenReturn(new ArrayList<>());

        // Act
        schoolerPromotionCoreService.createPromotionsResponse(promotionMapFromCaas, promotionsMap, "schoolerId");

        // Assert
        assertTrue(promotionsMap.isEmpty());
    }

    @Test
    void testCreatePromotionsResponseWithValidPromotions() {
        // Arrange
        Map<String, List<PromotionsMappingResponse>> promotionMapFromCaas = new HashMap<>();
        List<PromotionsMappingResponse> promotionsMappingResponseList = new ArrayList<>();
        promotionsMappingResponseList.add(new PromotionsMappingResponse());
        promotionMapFromCaas.put("schoolerId", promotionsMappingResponseList);

        Map<String, List<SchoolerPromotion>> promotionsMap = new HashMap<>();

        List<SchoolerPromotion> schoolerPromotionList = new ArrayList<>();
        schoolerPromotionList.add(new SchoolerPromotion());

        when(schoolerPromotionMapper.mapCaasPromotionResponsesToSchoolerPromotions(promotionsMappingResponseList))
                .thenReturn(schoolerPromotionList);

        // Act
        schoolerPromotionCoreService.createPromotionsResponse(promotionMapFromCaas, promotionsMap, "schoolerId");

        // Assert
        assertEquals(1, promotionsMap.size());
        assertEquals(1, promotionsMap.get("schoolerId").size());
    }
}
...........................................
@Test
public void testGetAllPromotionsForPromotionCategory_Success() {
    // Arrange
    String schoolerCategoryIds = "123e4567-e89b-12d3-a456-426614174000";
    String processorSchoolerIds = "processor1";
    int schoolerCategoryVersion = 1;

    SchoolerCategory category = new SchoolerCategory();
    category.setId(UUID.randomUUID());
    category.setSchoolers(new ArrayList<>());

    List<SchoolerCategory> schoolerCategoriesList = Collections.singletonList(category);

    when(schoolerCoreService.getSchoolerCategoriesList(schoolerCategoryVersion)).thenReturn(schoolerCategoriesList);

    Map<String, List<PromotionsMappingResponse>> promotionMapFromCaas = new HashMap<>();
    promotionMapFromCaas.put("processor1", new ArrayList<>());

    when(campaignServiceClient.getAllPromotions(anyBoolean())).thenReturn(promotionMapFromCaas);

    // Act
    Map<String, List<SchoolerPromotion>> result = schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(
            schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);

    // Assert
    assertNotNull(result);
    assertFalse(result.isEmpty());

    // Verify
    verify(schoolerCoreService, times(1)).getSchoolerCategoriesList(schoolerCategoryVersion);
    verify(campaignServiceClient, times(1)).getAllPromotions(anyBoolean());
}
..............................................................
@Test
public void testGetAllPromotionsForPromotionCategory_Failure_SchoolerCoreServiceException() {
    // Arrange
    String schoolerCategoryIds = "123e4567-e89b-12d3-a456-426614174000";
    String processorSchoolerIds = "processor1";
    int schoolerCategoryVersion = 1;

    when(schoolerCoreService.getSchoolerCategoriesList(schoolerCategoryVersion)).thenThrow(new RuntimeException());

    // Act and Assert
    assertThrows(RuntimeException.class, () -> schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(
            schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion));
}

@Test
public void testGetAllPromotionsForPromotionCategory_Failure_CampaignServiceClientException() {
    // Arrange
    String schoolerCategoryIds = "123e4567-e89b-12d3-a456-426614174000";
    String processorSchoolerIds = "processor1";
    int schoolerCategoryVersion = 1;

    SchoolerCategory category = new SchoolerCategory();
    category.setId(UUID.randomUUID());
    category.setSchoolers(new ArrayList<>());

    List<SchoolerCategory> schoolerCategoriesList = Collections.singletonList(category);

    when(schoolerCoreService.getSchoolerCategoriesList(schoolerCategoryVersion)).thenReturn(schoolerCategoriesList);

    when(campaignServiceClient.getAllPromotions(anyBoolean())).thenThrow(new RuntimeException());

    // Act and Assert
    assertThrows(RuntimeException.class, () -> schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(
            schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion));
}