Fetches biller data last updated at map from cache when cache is not empty:
    @Test
    public void test_fetch_from_cache_when_cache_not_empty() {
        BillerCoreService service = new BillerCoreService();
        List<UUID> billerIds = List.of(UUID.randomUUID());
        List<String> processorBillerIds = List.of("processorBillerId1");
        Map<String, Object> expectedMap = new HashMap<>();
        expectedMap.put("key", "value");

        WmClient wmClientMock = mock(WmClient.class);
        when(wmClientMock.getBulk(anyList())).thenReturn(expectedMap);
        service.wmClient = wmClientMock;

        Map<String, Object> result = service.fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);

        assertEquals(expectedMap, result);
    }
...................................................................
Fetches biller data last updated at map from database when cache is empty:
    @Test
    public void test_fetch_from_db_when_cache_empty() {
        BillerCoreService service = new BillerCoreService();
        List<UUID> billerIds = List.of(UUID.randomUUID());
        List<String> processorBillerIds = List.of("processorBillerId1");
        Map<String, Object> expectedMap = new HashMap<>();
        expectedMap.put("key", "value");

        WmClient wmClientMock = mock(WmClient.class);
        when(wmClientMock.getBulk(anyList())).thenReturn(Collections.emptyMap());
        service.wmClient = wmClientMock;

        BillerRepository billerRepositoryMock = mock(BillerRepository.class);
        when(billerRepositoryMock.getBillersInfo(anyList(), anyBoolean())).thenReturn(new ArrayList<>());
        service.billerRepository = billerRepositoryMock;

        Map<String, Object> result = service.fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);

        assertEquals(expectedMap, result);
    }
...................................................................
Handles null input for both billerIds and processorBillerIds:
    @Test
    public void test_handles_null_input_for_both_billerids_and_processorbillerids() {
        // Prepare
        Fetchbillerdatalastupdatedatmap fetchbillerdatalastupdatedatmap = new Fetchbillerdatalastupdatedatmap();
    
        // Execute
        Map<String, Object> result = fetchbillerdatalastupdatedatmap.fetchBillerDataLastUpdatedAtMap(null, null);
    
        // Verify
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }
...................................................................
Handles empty list input for both billerIds and processorBillerIds:
    @Test
    public void test_handles_empty_list_input() {
        // Prepare
        Fetchbillerdatalastupdatedatmap fetchbillerdatalastupdatedatmap = new Fetchbillerdatalastupdatedatmap();

        // Perform
        Map<String, Object> result = fetchbillerdatalastupdatedatmap.fetchBillerDataLastUpdatedAtMap(Collections.emptyList(), Collections.emptyList());

        // Verify
        assertTrue(result.isEmpty());
    }
...................................................................
Handles scenario where all processor biller IDs are missing from cache:
    @Test
    public void test_processor_biller_ids_missing_from_cache() {
        Fetchbillerdatalastupdatedatmap fetchbillerdatalastupdatedatmap = new Fetchbillerdatalastupdatedatmap();
        List<UUID> billerIds = new ArrayList<>();
        List<String> processorBillerIds = new ArrayList<>();
    
        Map<String, Object> result = fetchbillerdatalastupdatedatmap.fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);
    
        assertTrue(result.isEmpty());
    }
...................................................................
Logs errors when fetching data from cache fails:
    @Test
    public void test_logs_errors_when_fetching_data_from_cache_fails() {
        // Prepare
        Fetchbillerdatalastupdatedatmap fetchbillerdatalastupdatedatmap = new Fetchbillerdatalastupdatedatmap();
    
        // Perform & Assert
        assertThrows(Exception.class, () -> {
            fetchbillerdatalastupdatedatmap.fetchBillerDataLastUpdatedAtMap(null, null);
        });
    }
...................................................................
Ensures no duplicate entries in the returned map:
    @Test
    public void test_no_duplicate_entries_in_map() {
        // Prepare
        Fetchbillerdatalastupdatedatmap fetchbillerdatalastupdatedatmap = new Fetchbillerdatalastupdatedatmap();

        // Test
        Map<String, Object> result = fetchbillerdatalastupdatedatmap.fetchBillerDataLastUpdatedAtMap(Collections.emptyList(), Collections.emptyList());

        // Verify
        Set<Object> valuesSet = new HashSet<>(result.values());
        assertEquals(result.size(), valuesSet.size());
    }
...................................................................
Validates the format of UUIDs and processorBillerIds:
    @Test
    public void validate_uuids_and_processor_biller_ids_format() {
        // Prepare test data
        List<UUID> billerIds = Arrays.asList(UUID.randomUUID(), UUID.randomUUID());
        List<String> processorBillerIds = Arrays.asList("12345", "67890");

        // Mock the behavior of fetchBillerDataLastUpdatedAtMapFromCache
        when(fetchBillerDataLastUpdatedAtMapFromCache(eq(billerIds), eq(processorBillerIds))).thenReturn(new HashMap<>());

        // Mock the behavior of fetchBillerDataLastUpdatedAtMapFromDB
        when(fetchBillerDataLastUpdatedAtMapFromDB(any(), any())).thenReturn(new HashMap<>());

        // Call the method under test
        Map<String, Object> result = fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);

        // Assertions
        assertNotNull(result);
        // Add more assertions as needed
    }
...................................................................
...................................................................
...................................................................

...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................
...................................................................