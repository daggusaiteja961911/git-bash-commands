import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.yourpackage.dto.BillerByIdDTO;
import com.yourpackage.dto.BillDetailDTO;
import com.yourpackage.dto.BillPlanDTO;
import com.yourpackage.dto.BillerInformation;
import com.yourpackage.response.BillerByIdResponse;
import com.yourpackage.service.BillerService;
import com.yourpackage.controller.BillerControllerImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

@ExtendWith(MockitoExtension.class)
public class BillerControllerImplTest {

    @Mock
    private BillerService billerService;

    @InjectMocks
    private BillerControllerImpl billerController;

    private UUID billerId;
    private String processorBillerId;
    private BillerByIdResponse mockResponse;

    @BeforeEach
    public void setUp() {
        billerId = UUID.fromString("09a09584-2568-11eb-80ff-fa163e3d3c63");
        processorBillerId = "29866";

        // Creating mock response data
        BillerInformation billerInformation = BillerInformation.builder()
                .billerId(billerId)
                .processorBillerId(processorBillerId)
                .displayName("Bait")
                .productDisplayName("Recarga celular")
                .imageURL("https://cashi.walmart.com/Providers-Icons/PNG_NEW/Bait_080923.png")
                .billerBehaviourCode("BBC_1")
                .termsAndConditions("https://mibait.com/tyc.html")
                .information("<p>Para más información visita <a href=\"https://mibait.com/\">https://mibait.com/</a></p>")
                .disclaimer("Todas las recargas incluyen: Llamadas (Nacionales y larga distancia a EUA y Canadá) SMS y navegación en redes sociales.")
                .build();

        BillDetailDTO billDetail = BillDetailDTO.builder()
                .billDetailId(UUID.fromString("1befa3cb-cbd4-da41-a7c9-d03ec4063e3a"))
                .amount(BigDecimal.valueOf(30.00))
                .name("Mi Bait 30")
                .description("4,000 MB libres / 3 días. 250 Min en llamadas (MEX, EUA y CAN) y 125 SMS")
                .validity("Válido por 3 días")
                .socialMediaIcons(new String[]{"WHATSAPP", "FACEBOOK", "MESSENGER"})
                .build();

        BillPlanDTO billPlan = BillPlanDTO.builder()
                .plan("Tiempo Aire")
                .billDetails(Collections.singletonList(billDetail))
                .build();

        BillerByIdDTO billerByIdDTO = BillerByIdDTO.builder()
                .billerId(billerId)
                .processorBillerId(processorBillerId)
                .displayName("Bait")
                .billerType("Tiempo aire")
                .billType("phone_number")
                .prepaid(true)
                .billPlans(Collections.singletonList(billPlan))
                .inputType(InputType.NUMERIC)
                .inputPlaceholderText("Número celular")
                .topupCommission("0.00")
                .build();

        mockResponse = BillerByIdResponse.builder()
                .billerInformation(billerInformation)
                .billers(Collections.singletonList(billerByIdDTO))
                .lastUpdatedAt(LocalDateTime.parse("2024-08-21T13:22:22"))
                .build();
    }

    @Test
    public void testGetBillerById() throws Exception {
        // Mocking service response
        when(billerService.getBillerById(billerId, processorBillerId)).thenReturn(mockResponse);

        // Testing the controller method
        BillerByIdResponse response = billerController.getBillerById(billerId, processorBillerId);

        // Verifying the response
        assertNotNull(response);
        assertEquals(mockResponse.getBillerInformation().getDisplayName(), response.getBillerInformation().getDisplayName());
        assertEquals(mockResponse.getBillers().size(), response.getBillers().size());
        assertEquals(mockResponse.getBillers().get(0).getBillPlans().get(0).getPlan(), response.getBillers().get(0).getBillPlans().get(0).getPlan());

        // Verify interaction with the mock service
        verify(billerService, times(1)).getBillerById(billerId, processorBillerId);
    }
}
............................................
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import com.yourpackage.dto.BillerByIdDTO;
import com.yourpackage.dto.BillDetailDTO;
import com.yourpackage.dto.BillPlanDTO;
import com.yourpackage.dto.BillerInformation;
import com.yourpackage.response.BillerByIdResponse;
import com.yourpackage.service.BillerService;
import com.yourpackage.controller.BillerControllerImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.http.MediaType;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.UUID;

@WebMvcTest(BillerControllerImpl.class)
public class BillerControllerImplTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private BillerService billerService;

    private UUID billerId;
    private String processorBillerId;
    private BillerByIdResponse mockResponse;

    @BeforeEach
    public void setUp() {
        billerId = UUID.fromString("09a09584-2568-11eb-80ff-fa163e3d3c63");
        processorBillerId = "29866";

        // Setting up the mock response
        BillerInformation billerInformation = BillerInformation.builder()
                .billerId(billerId)
                .processorBillerId(processorBillerId)
                .displayName("Bait")
                .productDisplayName("Recarga celular")
                .imageURL("https://cashi.walmart.com/Providers-Icons/PNG_NEW/Bait_080923.png")
                .billerBehaviourCode("BBC_1")
                .termsAndConditions("https://mibait.com/tyc.html")
                .information("<p>Para más información visita <a href=\"https://mibait.com/\">https://mibait.com/</a></p>")
                .disclaimer("Todas las recargas incluyen: Llamadas (Nacionales y larga distancia a EUA y Canadá) SMS y navegación en redes sociales.")
                .build();

        BillDetailDTO billDetail = BillDetailDTO.builder()
                .billDetailId(UUID.fromString("1befa3cb-cbd4-da41-a7c9-d03ec4063e3a"))
                .amount(BigDecimal.valueOf(30.00))
                .name("Mi Bait 30")
                .description("4,000 MB libres / 3 días. 250 Min en llamadas (MEX, EUA y CAN) y 125 SMS")
                .validity("Válido por 3 días")
                .socialMediaIcons(new String[]{"WHATSAPP", "FACEBOOK", "MESSENGER"})
                .build();

        BillPlanDTO billPlan = BillPlanDTO.builder()
                .plan("Tiempo Aire")
                .billDetails(Collections.singletonList(billDetail))
                .build();

        BillerByIdDTO billerByIdDTO = BillerByIdDTO.builder()
                .billerId(billerId)
                .processorBillerId(processorBillerId)
                .displayName("Bait")
                .billerType("Tiempo aire")
                .billType("phone_number")
                .prepaid(true)
                .billPlans(Collections.singletonList(billPlan))
                .inputPlaceholderText("Número celular")
                .topupCommission("0.00")
                .build();

        mockResponse = BillerByIdResponse.builder()
                .billerInformation(billerInformation)
                .billers(Collections.singletonList(billerByIdDTO))
                .lastUpdatedAt(LocalDateTime.parse("2024-08-21T13:22:22"))
                .build();
    }

    @Test
    public void testGetBillerById() throws Exception {
        // Mocking the service response
        when(billerService.getBillerById(billerId, processorBillerId)).thenReturn(mockResponse);

        // Testing the controller endpoint with MockMvc
        mockMvc.perform(get("/services/biller-data/v1/biller/{billerId}", billerId)
                        .param("processorBillerId", processorBillerId)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.billerInformation.displayName").value("Bait"))
                .andExpect(jsonPath("$.billers[0].displayName").value("Bait"))
                .andExpect(jsonPath("$.billers[0].billPlans[0].plan").value("Tiempo Aire"))
                .andExpect(jsonPath("$.billers[0].billPlans[0].billDetails[0].name").value("Mi Bait 30"))
                .andDo(print());

        // Verifying that the service method was called once
        verify(billerService, times(1)).getBillerById(billerId, processorBillerId);
    }
}
.............................
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import com.yourpackage.dto.BillerByIdDTO;
import com.yourpackage.dto.BillDetailDTO;
import com.yourpackage.dto.BillPlanDTO;
import com.yourpackage.dto.BillerInformation;
import com.yourpackage.response.BillerByIdResponse;
import com.yourpackage.service.BillerService;
import com.yourpackage.controller.BillerControllerImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.http.MediaType;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.UUID;

@WebMvcTest(BillerControllerImpl.class)
public class BillerControllerImplTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private BillerService billerService;

    private UUID billerId;
    private String processorBillerId;
    private BillerByIdResponse mockResponse;

    @BeforeEach
    public void setUp() {
        billerId = UUID.fromString("09a09584-2568-11eb-80ff-fa163e3d3c63");
        processorBillerId = "29866";

        // Setting up the mock response
        BillerInformation billerInformation = BillerInformation.builder()
                .billerId(billerId)
                .processorBillerId(processorBillerId)
                .displayName("Bait")
                .productDisplayName("Recarga celular")
                .imageURL("https://cashi.walmart.com/Providers-Icons/PNG_NEW/Bait_080923.png")
                .billerBehaviourCode("BBC_1")
                .termsAndConditions("https://mibait.com/tyc.html")
                .information("<p>Para más información visita <a href=\"https://mibait.com/\">https://mibait.com/</a></p>")
                .disclaimer("Todas las recargas incluyen: Llamadas (Nacionales y larga distancia a EUA y Canadá) SMS y navegación en redes sociales.")
                .build();

        BillDetailDTO billDetail = BillDetailDTO.builder()
                .billDetailId(UUID.fromString("1befa3cb-cbd4-da41-a7c9-d03ec4063e3a"))
                .amount(BigDecimal.valueOf(30.00))
                .name("Mi Bait 30")
                .description("4,000 MB libres / 3 días. 250 Min en llamadas (MEX, EUA y CAN) y 125 SMS")
                .validity("Válido por 3 días")
                .socialMediaIcons(new String[]{"WHATSAPP", "FACEBOOK", "MESSENGER"})
                .build();

        BillPlanDTO billPlan = BillPlanDTO.builder()
                .plan("Tiempo Aire")
                .billDetails(Collections.singletonList(billDetail))
                .build();

        BillerByIdDTO billerByIdDTO = BillerByIdDTO.builder()
                .billerId(billerId)
                .processorBillerId(processorBillerId)
                .displayName("Bait")
                .billerType("Tiempo aire")
                .billType("phone_number")
                .prepaid(true)
                .billPlans(Collections.singletonList(billPlan))
                .inputPlaceholderText("Número celular")
                .topupCommission("0.00")
                .build();

        mockResponse = BillerByIdResponse.builder()
                .billerInformation(billerInformation)
                .billers(Collections.singletonList(billerByIdDTO))
                .lastUpdatedAt(LocalDateTime.parse("2024-08-21T13:22:22"))
                .build();
    }

    @Test
    public void testGetBillerById() throws Exception {
        // Mocking the service response
        when(billerService.getBillerById(billerId, processorBillerId)).thenReturn(mockResponse);

        // Testing the controller endpoint with MockMvc
        mockMvc.perform(get("/services/biller-data/v1/biller/{billerId}", billerId)
                        .param("processorBillerId", processorBillerId)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.billerInformation.displayName").value("Bait"))
                .andExpect(jsonPath("$.billers[0].displayName").value("Bait"))
                .andExpect(jsonPath("$.billers[0].billPlans[0].plan").value("Tiempo Aire"))
                .andExpect(jsonPath("$.billers[0].billPlans[0].billDetails[0].name").value("Mi Bait 30"))
                .andDo(print());

        // Verifying that the service method was called once
        verify(billerService, times(1)).getBillerById(billerId, processorBillerId);
    }
}
