import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(MockitoExtension.class)
public class SchoolPaymentControllerTest {

    @Mock
    private SchoolPaymentService schoolPaymentService;

    @InjectMocks
    private SchoolPaymentController schoolPaymentController;

    private MockMvc mockMvc;

    @BeforeEach
    void setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(schoolPaymentController).build();
    }

    @Test
    void shouldTest_FetchSchoolPayPaymentInstruments() throws Exception {
        // Arrange
        FetchSchoolPayPaymentInstrumentsRequest request = new FetchSchoolPayPaymentInstrumentsRequest();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();

        // Act
        mockMvc.perform(get("/services/school-payment/v1/options")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request))
                .headers(headers)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        // Assert
        verify(schoolPaymentService).fetchSchoolPayPaymentInstruments(any(FetchSchoolPayPaymentInstrumentsRequest.class), any(MultiValueMap.class));
    }

    @Test
    void shouldTest_FetchSchoolPayPaymentInstrumentsWithPreselection() throws Exception {
        // Arrange
        FetchSchoolPayPaymentInstrumentsRequest request = new FetchSchoolPayPaymentInstrumentsRequest();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();

        // Act
        mockMvc.perform(get("/services/school-payment/v2/options")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request))
                .headers(headers)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        // Assert
        verify(schoolPaymentService).fetchSchoolPayPaymentInstrumentsWithPreselection(any(FetchSchoolPayPaymentInstrumentsRequest.class), any(MultiValueMap.class));
    }

    @Test
    void shouldTest_PaySchoolV1() throws Exception {
        // Arrange
        PaySchoolRequest request = new PaySchoolRequest();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();

        // Act
        mockMvc.perform(post("/services/school-payment/v1/school-payment/pay")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request))
                .headers(headers)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        // Assert
        verify(schoolPaymentService).paySchoolV1(any(PaySchoolRequest.class), any(MultiValueMap.class));
    }

    @Test
    void shouldTest_CancelPaySchoolInit() throws Exception {
        // Arrange
        CancelPaySchoolInitRequest request = new CancelPaySchoolInitRequest();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();

        // Act
        mockMvc.perform(post("/services/school-payment/v1/school-payment/abort")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request))
                .headers(headers)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        // Assert
        verify(schoolPaymentService).cancelPaySchoolInit(any(CancelPaySchoolInitRequest.class), any(MultiValueMap.class));
    }
}
......................................................
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;

import dto.request.schoolpay.CancelPaySchoolInitRequest;
import dto.request.schoolpay.FetchSchoolPayPaymentInstrumentsRequest;
import dto.request.schoolpay.PaySchoolRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@WebMvcTest(SchoolPaymentController.class)
public class SchoolPaymentControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private WebApplicationContext webApplicationContext;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    @Test
    public void testFetchSchoolPayPaymentInstruments() throws Exception {
        FetchSchoolPayPaymentInstrumentsRequest request = new FetchSchoolPayPaymentInstrumentsRequest();

        mockMvc.perform(post("/services/school-payment/v1/options")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{}")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }

    @Test
    public void testFetchSchoolPayPaymentInstrumentsWithPreselection() throws Exception {
        FetchSchoolPayPaymentInstrumentsRequest request = new FetchSchoolPayPaymentInstrumentsRequest();

        mockMvc.perform(post("/services/school-payment/v2/options")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{}")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }

    @Test
    public void testPaySchoolV1() throws Exception {
        PaySchoolRequest request = new PaySchoolRequest();

        mockMvc.perform(post("/services/school-payment/v1/school-payment/pay")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{}")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }

    @Test
    public void testCancelPaySchoolInit() throws Exception {
        CancelPaySchoolInitRequest request = new CancelPaySchoolInitRequest();

        mockMvc.perform(post("/services/school-payment/v1/school-payment/abort")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{}")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }
}
