{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue-BoldItalic;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 MOCK:\uc0\u8232 -> 
\f1\b @Mock\'a0
\f0\b0 creates a mock.\
-> @Mock\'a0annotation mocks the concerned object.\
-> Purpose: Creates a mock instance of a class or interface.\uc0\u8232 -> Usage: When you want to simulate behaviour of dependencies without executing their actual logic.\u8232 -> Why: Useful for isolating the class under test by mocking its dependencies.\u8232 \u8232 INJECTMOCK:\u8232 -> 
\f1\b  @InjectMock
\f0\b0 \'a0creates an instance of the class and injects the mocks that are marked with the annotations\'a0
\f1\b @Mock
\f0\b0 \'a0into it.\
-> Purpose: Automatically injects mock objects into the class under test.\
-> Usage: when you want the class under test to use mocked dependencies automatically.\
-> Why: Helps in testing the class in isolation with its dependencies mocked.\
\

\f1\b Interface
\f0\b0 : An interface in the Java programming language is an abstract type that is used to declare a behavior that classes must implement. They are similar to protocols. Interfaces are declared using the interface keyword, and may only contain method signature and constant declarations.\
\

\f1\b @InjectMocks
\f0\b0 \'a0: annotation tells to Mockito to inject all mocks (objects annotated by\'a0@Mock\'a0annotation) into fields of testing object. Mockito uses Reflection for this.\
\

\f1\b @Autowired
\f0\b0 \'a0: annotation tells to Spring framework to inject bean from its IoC container. Spring also uses reflection for this when it is private field injection. You can even use even use\'a0@Inject\'a0annotation (part of Java EE specification) with the same effect.\
\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b\fs28 \cf0 ObjectMapper
\f0\b0\fs26  provides functionality for reading and writing JSON, either to and from basic POJOs (Plain Old Java Objects), or to and from a general-purpose JSON Tree Model ( JsonNode ), as well as related functionality for performing conversions.\
\
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..\uc0\u8232 
\f1\b mockMvc = MockMvcBuilders.
\f2\i standaloneSetup
\f1\i0 (billerController).build();
\f0\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 mockMvc :
\f0\b0  An instance of MockMvc used for testing Spring Mvc Controllers.\uc0\u8232 
\f1\b MockMvcBuilders.
\f2\i standaloneSetup
\f1\i0 (billerController): 
\f0\b0 Configures MockMvc with a specific controller, for testing without needing the full application context.\

\f1\b build():
\f0\b0  Finalises the setup and creates the MockMvc instance.\uc0\u8232 
\f1\b why: 
\f0\b0 Allows testing of the controller in isolation, ensuring that it behaves correctly without needing the entire application to run.\
\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf0 objectMapper = new ObjectMapper();
\f0\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 objectMapper:
\f0\b0  An instance of ObjectMapper from the Jackson library \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf0 new ObjectMapper():
\f0\b0  Initialises the ObjectMapper , which is used for converting Java Object to JSON and vice versa.\uc0\u8232 
\f1\b Why:
\f0\b0  Facilitates JSON Serialization and deserialisation in tests, allowing you to prepare and interpret JSON data easily.\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 Overall:
\f0\b0  These lines set up the necessary tools for testing a spring MVC controller , enabling you to simulate web requests and handle JSON data within your tests.\
\
\uc0\u8232 \u8232 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf0 String requestBody = "\{\\"\\":\\"\\"\}";
\f0\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 Purpose: 
\f0\b0 Initializes a String variable named requestBody with an empty JSON object.\uc0\u8232 
\f1\b why: 
\f0\b0 This is typically used as a placeholder for JSON content in a test case.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \

\f1\b mockMvc.perform(
\f2\i get
\f1\i0 ("/services/biller-data/incorrect-search-keywords")
\f0\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 mockMvc:
\f0\b0  An object provide by Spring to simulate HTTP requests in tests.\uc0\u8232 
\f1\b Perform:
\f0\b0  Execute the request.\uc0\u8232 
\f1\b get:
\f0\b0  Specifies an HTTP GET request to the endpoint url\uc0\u8232 
\f1\b why: 
\f0\b0 Begins setting up the mock request to test the controller\'92s response.\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0               
\f1\b   .contentType(MediaType.
\f2\i APPLICATION_JSON
\f1\i0 )
\f0\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 contentType: 
\f0\b0 Sets the content-Type header of the request.\uc0\u8232 
\f1\b MediType.Application_Json:
\f0\b0  Indicates that the request body is in JSON format.\

\f1\b Why:
\f0\b0  Specifies that the request body should be interpreted as JSON data.\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0                
\f1\b  .content(requestBody))
\f0\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 content(body):
\f0\b0  Attaches the body string to the body of the request.\

\f1\b Why:
\f0\b0  Provides the necessary data payload for the request simulating input to the endpoint.\uc0\u8232 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0         //.andExpect(status().isBadRequest());\
       
\f1\b  .andExpect(
\f2\i status
\f1\i0 ().isOk());
\f0\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 andExpect:
\f0\b0  Sets the expectations for the result of the request.\uc0\u8232 
\f1\b status().isOk():
\f0\b0 \uc0\u8232 
\f1\b why: 
\f0\b0 verifies that the controller handles the request successfully and returns the expected status code.\
\
\
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..\
\
Controller: \uc0\u8232 purpose:Handles HTTP requests, processes user input, and interacts with the service layer to execute business logic.\
Role: Acts as an intermediary between the view and the service layer, coordinating the flow of data.\
\uc0\u8232 controllerImpl:\
Purpose: A specific implementation of a controller interface. The naming convention often implies adherence to an interface-driven design\uc0\u8232 Role: Contains the actual code for handling specific endpoints and delegating tasks to the service layer.\
\
Service:\
Purpose: Contains business logic and rules. It\'92s responsible for processing data received from the controller before passing it to the data access layer.\uc0\u8232 Role: Provides an abstraction for business operations and transactions, maintaining separation between the business logic and the user interface.\u8232 \u8232 ServiceImpl:\u8232 Purpose: A specific implementation of a service interface.\u8232 Role: Implementing the business methods defined in the service interface , often interacting with repositories or DAO\'92s to perform operations on data.}