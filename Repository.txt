Retrieve BillerDO by billerId:
    @Test
    public void test_retrieve_biller_by_id() {
        // Prepare
        UUID billerId = UUID.randomUUID();
        BillerDO biller = new BillerDO();
        biller.setBillerId(billerId);
        when(billerRepository.getByBillerId(billerId)).thenReturn(Optional.of(biller));

        // Execute
        Optional<BillerDO> retrievedBiller = billerRepository.getByBillerId(billerId);

        // Verify
        assertTrue(retrievedBiller.isPresent());
        assertEquals(billerId, retrievedBiller.get().getBillerId());
    }
................................................................................................
Retrieve BillerDO with non-existent billerId:
    @Test
    public void test_retrieve_biller_with_non_existent_id() {
        // Prepare
        UUID nonExistentBillerId = UUID.randomUUID();

        // Execute
        Optional<BillerDO> retrievedBiller = billerRepository.getByBillerId(nonExistentBillerId);

        // Validate
        assertFalse(retrievedBiller.isPresent());
    }
................................................................................................
Retrieve BillerDO with non-existent processorBillerId:
    @Test
    public void test_retrieve_biller_with_non_existent_processor_biller_id() {
        // Prepare
        String nonExistentProcessorBillerId = "non_existent_id";

        // Perform
        Optional<BillerDO> biller = billerRepository.getByProcessorBillerId(nonExistentProcessorBillerId);

        // Verify
        assertFalse(biller.isPresent());
    }
................................................................................................
Retrieve BillerDO with null billerId:
    @Test
    public void test_retrieve_biller_with_null_biller_id() {
        // Prepare
        BillerRepository billerRepository = new BillerRepositoryImpl(); // Assuming implementation of BillerRepository

        // Perform
        Optional<BillerDO> biller = billerRepository.getByBillerId(null);

        // Verify
        assertTrue(biller.isEmpty());
    }
................................................................................................
Fetch popular billers when none exist:
    @Test
    public void test_fetch_popular_billers_when_none_exist() {
        // Prepare
        when(billerRepository.getPopularBillersAndSubBillers()).thenReturn(new ArrayList<>());

        // Execute
        List<BillerDO> popularBillers = code_under_test.getPopularBillersAndSubBillers();

        // Verify
        assertTrue(popularBillers.isEmpty());
    }
................................................................................................
Test retrieval of BillerDO with special characters in processorBillerId:
    @Test
    public void test_retrieval_with_special_characters_in_processor_biller_id() {
        // Prepare
        String specialProcessorBillerId = "special@!#id";

        // Act
        Optional<BillerDO> biller = billerRepository.getByProcessorBillerId(specialProcessorBillerId);

        // Assert
        assertTrue(biller.isPresent());
        assertEquals(specialProcessorBillerId, biller.get().getProcessorBillerId());
    }
................................................................................................
Test retrieval of BillerDO with empty processorBillerId:
    @Test
    public void test_retrieval_of_biller_with_empty_processor_biller_id() {
        // Prepare
        String emptyProcessorBillerId = "";
    
        // Perform
        Optional<BillerDO> biller = billerRepository.getByProcessorBillerId(emptyProcessorBillerId);
    
        // Verify
        assertFalse(biller.isPresent());
    }
................................................................................................
Test retrieval of BillerDO with disabled status:
    @Test
    public void test_retrieval_of_biller_with_disabled_status() {
        // Prepare
        UUID billerId = UUID.randomUUID();
        Boolean enabled = false;
    
        // Perform
        Optional<BillerDO> biller = billerRepository.getByBillerIdAndEnabled(billerId, enabled);
    
        // Verify
        assertFalse(biller.isPresent());
    }
................................................................................................
Retrieve BillerDO by processorBillerId and enabled status:
    @Test
    public void test_retrieve_biller_by_processorbillerid_and_enabled_status() {
        // Prepare
        String processorBillerId = "123456";
        Boolean enabled = true;

        // Perform
        Optional<BillerDO> biller = billerRepository.getByProcessorBillerIdAndEnabled(processorBillerId, enabled);

        // Verify
        assertTrue(biller.isPresent());
        assertEquals(processorBillerId, biller.get().getProcessorBillerId());
        assertTrue(biller.get().isEnabled());
    }
................................................................................................
Retrieve BillerDO by processorBillerId:
    @Test
    public void test_retrieve_biller_by_processor_id() {
        String processorBillerId = "processor123";
        BillerDO biller = new BillerDO();
        biller.setProcessorBillerId(processorBillerId);
        when(billerRepository.getByProcessorBillerId(processorBillerId)).thenReturn(Optional.of(biller));
    
        Optional<BillerDO> result = billerRepository.getByProcessorBillerId(processorBillerId);
    
        assertTrue(result.isPresent());
        assertEquals(processorBillerId, result.get().getProcessorBillerId());
    }
................................................................................................
Retrieve BillerDO by processorBillerId and enabled status:
    @Test
    public void test_retrieve_biller_by_processor_id_and_enabled() {
        String processorBillerId = "processor123";
        Boolean enabled = true;
        BillerDO biller = new BillerDO();
        biller.setProcessorBillerId(processorBillerId);
        biller.setEnabled(enabled);
        when(billerRepository.getByProcessorBillerIdAndEnabled(processorBillerId, enabled)).thenReturn(Optional.of(biller));
    
        Optional<BillerDO> result = billerRepository.getByProcessorBillerIdAndEnabled(processorBillerId, enabled);
    
        assertTrue(result.isPresent());
        assertEquals(processorBillerId, result.get().getProcessorBillerId());
        assertEquals(enabled, result.get().getEnabled());
    }
................................................................................................
Fetch popular billers and their sub-billers:
    @Test
    public void test_fetch_popular_billers_and_sub_billers() {
        BillerDO popularBiller = new BillerDO();
        popularBiller.setPopularBillerSequenceNumber(1);
        List<BillerDO> popularBillers = Arrays.asList(popularBiller);
        when(billerRepository.getPopularBillersAndSubBillers()).thenReturn(popularBillers);
    
        List<BillerDO> result = billerRepository.getPopularBillersAndSubBillers();
    
        assertFalse(result.isEmpty());
        assertEquals(1, result.size());
        assertEquals(1, result.get(0).getPopularBillerSequenceNumber());
    }
................................................................................................
................................................................................................
................................................................................................
................................................................................................

