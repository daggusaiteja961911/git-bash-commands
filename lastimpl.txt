
// Generated by CodiumAI

import com.walmart.international.wallet.payment.core.service.BillerCoreService;

import org.junit.Test;
import static org.junit.Assert.*;

public class CodeUnderTestTest {
    // Fetch biller categories from cache when cache hit occurs
    @Test
    public void fetch_biller_categories_from_cache_when_cache_hit_occurs() {
        Integer version = 1;
        String cacheKey = WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + version;
        List<BillerCategory> expectedCategories = List.of(new BillerCategory());
        when(wmClient.get(cacheKey)).thenReturn(expectedCategories);

        List<BillerCategory> result = billerCoreService.getBillerCategoriesList(version);

        assertEquals(expectedCategories, result);
        verify(wmClient, times(1)).get(cacheKey);
    }

    // Fetch biller categories from database when cache miss occurs
    @Test
    public void fetch_biller_categories_from_database_when_cache_miss_occurs() {
        Integer version = 1;
        String cacheKey = WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + version;
        when(wmClient.get(cacheKey)).thenReturn(null);
        List<BillerCategory> expectedCategories = List.of(new BillerCategory());
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(List.of(version)))
            .thenReturn(List.of(new BillerCategoryVersionMappingDO()));
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(any()))
            .thenReturn(expectedCategories);

        List<BillerCategory> result = billerCoreService.getBillerCategoriesList(version);

        assertEquals(expectedCategories, result);
        verify(wmClient, times(1)).get(cacheKey);
        verify(billerCategoryVersionMappingRepository, times(1)).getBillerCategoriesWithBillers(List.of(version));
    }

    // Cache the fetched biller categories after retrieving from database
    @Test
    public void cache_fetched_biller_categories_after_retrieving_from_database() {
        Integer version = 1;
        String cacheKey = WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + version;
        when(wmClient.get(cacheKey)).thenReturn(null);
        List<BillerCategory> expectedCategories = List.of(new BillerCategory());
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(List.of(version)))
            .thenReturn(List.of(new BillerCategoryVersionMappingDO()));
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(any()))
            .thenReturn(expectedCategories);

        billerCoreService.getBillerCategoriesList(version);

        verify(wmClient, times(1)).set(cacheKey, 0, expectedCategories);
    }

    // Return the list of biller categories for the given version
    @Test
    public void return_list_of_biller_categories_for_given_version() {
        Integer version = 1;
        String cacheKey = WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + version;
        List<BillerCategory> expectedCategories = List.of(new BillerCategory());
        when(wmClient.get(cacheKey)).thenReturn(expectedCategories);

        List<BillerCategory> result = billerCoreService.getBillerCategoriesList(version);

        assertEquals(expectedCategories, result);
    }

    // Handle null or invalid billerCategoryVersion input
    @Test
    public void test_handle_null_or_invalid_biller_category_version_input() {
        // Prepare
        Integer billerCategoryVersion = null;
    
        // Execute
        List<BillerCategory> result = code_under_test.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNull(result);
    }

    // Handle empty or null list of biller categories from database
    @Test
    public void test_handle_empty_or_null_list_of_biller_categories() {
        // Prepare
        Integer billerCategoryVersion = 1;
        List<BillerCategory> expectedBillerCategoriesList = new ArrayList<>();

        // Mocking
        when(wmClient.get(anyString())).thenReturn(null);
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(anyList())).thenReturn(new ArrayList<>());

        // Execute
        List<BillerCategory> actualBillerCategoriesList = code_under_test.getBillerCategoriesList(billerCategoryVersion);

        // Verify
        assertEquals(expectedBillerCategoriesList, actualBillerCategoriesList);
    }

    // Log successful retrieval of biller categories from cache
    @Test
    public void test_log_successful_retrieval_of_biller_categories_from_cache() {
        // Prepare
        Integer billerCategoryVersion = 1;
        List<BillerCategory> expectedBillerCategoriesList = new ArrayList<>();
        expectedBillerCategoriesList.add(new BillerCategory(1, "Category A"));
        expectedBillerCategoriesList.add(new BillerCategory(2, "Category B"));

        when(wmClient.get(WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + billerCategoryVersion)).thenReturn(expectedBillerCategoriesList);

        // Execute
        List<BillerCategory> actualBillerCategoriesList = billerCoreService.getBillerCategoriesList(billerCategoryVersion);

        // Verify
        assertEquals(expectedBillerCategoriesList, actualBillerCategoriesList);
        verify(log).info("BillerCategoriesMap from cache with key [{}] :: [{}]", WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + billerCategoryVersion, expectedBillerCategoriesList);
    }
    @Test
    public void test_log_successful_retrieval_of_biller_categories_from_cache_empty_list() {
        // Prepare
        Integer billerCategoryVersion = 1;
        List<BillerCategory> expectedBillerCategoriesList = new ArrayList<>();

        when(wmClient.get(WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + billerCategoryVersion)).thenReturn(Collections.emptyList());
        when(billerCoreService.fetchAndCacheBillerCategoriesMap(List.of(billerCategoryVersion))).thenReturn(Map.of(billerCategoryVersion, expectedBillerCategoriesList));

        // Execute
        List<BillerCategory> actualBillerCategoriesList = billerCoreService.getBillerCategoriesList(billerCategoryVersion);

        // Verify
        assertEquals(expectedBillerCategoriesList, actualBillerCategoriesList);
        verify(log).info("Fetching BillerCategoriesMap from database");
    }

    // Handle exceptions during cache retrieval
    @Test
    public void test_handle_exceptions_during_cache_retrieval() {
        // Prepare
        Integer billerCategoryVersion = 1;
        List<BillerCategory> expectedBillerCategoriesList = new ArrayList<>();
    
        // Mocking behavior
        when(wmClient.get(anyString())).thenThrow(new RuntimeException("Simulating cache retrieval error"));
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(anyList())).thenReturn(new ArrayList<>());
    
        // Execute
        List<BillerCategory> actualBillerCategoriesList = billerCoreService.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNull(actualBillerCategoriesList);
        verify(wmClient, times(1)).get(anyString());
        verify(billerCategoryVersionMappingRepository, times(1)).getBillerCategoriesWithBillers(anyList());
    }

    // Ensure the cache is updated with the latest biller categories data
    @Test
    public void ensure_cache_updated_with_latest_biller_categories_data() {
        // Test logic to be added
    }

    // Verify the cache key format for biller categories
    @Test
    public void verify_cache_key_format_for_biller_categories() {
        // Prepare
        Integer billerCategoryVersion = 1;
    
        // Execute
        List<BillerCategory> result = code_under_test.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNotNull(result);
        // Add more assertions as needed
    }

    // Handle exceptions during caching of biller categories
    @Test
    public void test_handle_exceptions_during_caching_biller_categories() {
        // Prepare
        Integer billerCategoryVersion = 1;
        List<BillerCategory> expectedBillerCategoriesList = new ArrayList<>();
    
        // Mocking behavior
        when(wmClient.get(anyString())).thenThrow(new RuntimeException("Simulating cache error"));
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(anyList())).thenThrow(new RuntimeException("Simulating DB fetch error"));
    
        // Execute
        List<BillerCategory> actualBillerCategoriesList = billerCoreService.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNull(actualBillerCategoriesList);
        verify(log).error(eq("Error while fetching BillerCategoriesMap from meghacache"), any(Exception.class));
        verify(log).error(eq("Error while fetching BillerCategoryVersionMapping data from DB for billerCategoryVersions [1]"), any(Exception.class));
    }

    // Confirm the logging of errors during cache and database operations
    @Test
    public void test_confirm_logging_errors_during_cache_and_database_operations() {
        // Prepare
        Integer billerCategoryVersion = 1;
    
        // Mocking behavior
        when(wmClient.get(anyString())).thenThrow(new RuntimeException("Simulated cache error"));
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(anyList())).thenThrow(new RuntimeException("Simulated DB error"));
    
        // Execute
        List<BillerCategory> result = billerCoreService.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNull(result);
        verify(log).error(eq("Error while fetching BillerCategoriesMap from meghacache"), any(Exception.class));
        verify(log).error(eq("Error while fetching BillerCategoryVersionMapping data from DB for billerCategoryVersions [1]"), any(Exception.class));
    }

    // Check the integrity of the biller categories data after retrieval
    @Test
    public void test_check_biller_categories_integrity() {
        // Prepare
        Integer billerCategoryVersion = 1;
    
        // Mocking behavior
        List<BillerCategory> expectedBillerCategoriesList = new ArrayList<>();
        BillerCategory billerCategory1 = new BillerCategory();
        billerCategory1.setId(1);
        billerCategory1.setName("Category 1");
        billerCategory1.setDescription("Description 1");
        expectedBillerCategoriesList.add(billerCategory1);
    
        when(wmClient.get(anyString())).thenReturn(null);
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(anyList())).thenReturn(new ArrayList<>());
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(anyList())).thenReturn(expectedBillerCategoriesList);
    
        // Execute
        List<BillerCategory> actualBillerCategoriesList = billerCoreService.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNotNull(actualBillerCategoriesList);
        assertEquals(expectedBillerCategoriesList.size(), actualBillerCategoriesList.size());
        assertEquals(expectedBillerCategoriesList.get(0).getId(), actualBillerCategoriesList.get(0).getId());
        assertEquals(expectedBillerCategoriesList.get(0).getName(), actualBillerCategoriesList.get(0).getName());
        assertEquals(expectedBillerCategoriesList.get(0).getDescription(), actualBillerCategoriesList.get(0).getDescription());
    }
    // Add more test cases for different scenarios if needed

    // Validate the mapping of biller categories to their versions
    @Test
    public void validate_mapping_of_biller_categories_to_versions() {
        // Prepare
        Integer billerCategoryVersion = 1;
        List<BillerCategory> expectedBillerCategories = new ArrayList<>();
        BillerCategory billerCategory1 = new BillerCategory();
        billerCategory1.setBillerCategoryVersion(1);
        billerCategory1.setName("Category 1");
        BillerCategory billerCategory2 = new BillerCategory();
        billerCategory2.setBillerCategoryVersion(1);
        billerCategory2.setName("Category 2");
        expectedBillerCategories.add(billerCategory1);
        expectedBillerCategories.add(billerCategory2);
    
        when(wmClient.get(anyString())).thenReturn(null);
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(anyList())).thenReturn(new ArrayList<>());
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(anyList())).thenReturn(expectedBillerCategories);
    
        // Execute
        List<BillerCategory> actualBillerCategories = billerCoreService.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNotNull(actualBillerCategories);
        assertEquals(expectedBillerCategories.size(), actualBillerCategories.size());
        for (int i = 0; i < expectedBillerCategories.size(); i++) {
            assertEquals(expectedBillerCategories.get(i).getName(), actualBillerCategories.get(i).getName());
            assertEquals(expectedBillerCategories.get(i).getBillerCategoryVersion(), actualBillerCategories.get(i).getBillerCategoryVersion());
        }
    }
    @Test
    public void validate_mapping_of_biller_categories_to_versions_cache_hit() {
        // Prepare
        Integer billerCategoryVersion = 1;
        List<BillerCategory> expectedBillerCategories = new ArrayList<>();
        BillerCategory billerCategory1 = new BillerCategory();
        billerCategory1.setBillerCategoryVersion(1);
        billerCategory1.setName("Category 1");
        BillerCategory billerCategory2 = new BillerCategory();
        billerCategory2.setBillerCategoryVersion(1);
        billerCategory2.setName("Category 2");
        expectedBillerCategories.add(billerCategory1);
        expectedBillerCategories.add(billerCategory2);
    
        when(wmClient.get(anyString())).thenReturn(expectedBillerCategories);
    
        // Execute
        List<BillerCategory> actualBillerCategories = billerCoreService.getBillerCategoriesList(billerCategoryVersion);
    
        // Verify
        assertNotNull(actualBillerCategories);
        assertEquals(expectedBillerCategories.size(), actualBillerCategories.size());
        for (int i = 0; i < expectedBillerCategories.size(); i++) {
            assertEquals(expectedBillerCategories.get(i).getName(), actualBillerCategories.get(i).getName());
            assertEquals(expectedBillerCategories.get(i).getBillerCategoryVersion(), actualBillerCategories.get(i).getBillerCategoryVersion());
        }
    }

}
...............................