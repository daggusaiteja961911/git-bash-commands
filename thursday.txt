Converts a valid BillerDO object to a Biller object:
    @Test
    public void test_converts_valid_billerdo_to_biller() {
        BillerCoreService service = new BillerCoreService();
        BillerDO billerDO = new BillerDO();
        billerDO.setBillerId(UUID.randomUUID());
        billerDO.setBillerName("Test Biller");
        Biller biller = service.prepareBillerFromDO(billerDO);
        assertNotNull(biller);
        assertEquals(billerDO.getBillerId(), biller.getBillerId());
        assertEquals(billerDO.getBillerName(), biller.getBillerName());
    }
........................................................
Maps billerDO to Biller without subBillers and billPlans:
    @Test
    public void test_maps_billerdo_to_biller_without_subbillers_and_billplans() {
        BillerCoreService service = new BillerCoreService();
        BillerMapper billerMapper = mock(BillerMapper.class);
        service.billerMapper = billerMapper;
        BillerDO billerDO = new BillerDO();
        Biller biller = new Biller();
        when(billerMapper.mapBillerDOToBillerWithoutSubBillersAndBillPlans(billerDO)).thenReturn(biller);
        Biller result = service.prepareBillerFromDO(billerDO);
        verify(billerMapper).mapBillerDOToBillerWithoutSubBillersAndBillPlans(billerDO);
        assertNotNull(result);
    }
........................................................
Sets billPlans in Biller from billerDO:
    @Test
    public void test_sets_billplans_in_biller_from_billerdo() {
        BillerCoreService service = new BillerCoreService();
        BillerMapper billerMapper = mock(BillerMapper.class);
        service.billerMapper = billerMapper;
        BillerDO billerDO = new BillerDO();
        List<BillPlan> billPlans = new ArrayList<>();
        when(billerMapper.mapBillPlans(billerDO)).thenReturn(billPlans);
        Biller result = service.prepareBillerFromDO(billerDO);
        verify(billerMapper).mapBillPlans(billerDO);
        assertEquals(billPlans, result.getBillPlans());
    }
........................................................
  List<Biller> subBillers = new ArrayList<>();
        when(billerMapper.mapSubBillerDOsToBillers(billerDO)).thenReturn(subBillers);
        Biller result = service.prepareBillerFromDO(billerDO);
        verify(billerMapper).mapSubBillerDOsToBillers(billerDO);
        assertEquals(subBillers, result.getSubBillers());
........................................................
Computes and sets maxUpdateTimestamp in Biller:
    @Test
    public void test_compute_and_set_max_update_timestamp() {
        // Arrange
        BillerDO billerDO = new BillerDO();
        billerDO.setUpdateDate(LocalDateTime.now());
    
        BillerMapper billerMapper = new BillerMapper();
        BillPayUtil billPayUtil = new BillPayUtil();
    
        // Act
        Biller result = billPayUtil.prepareBillerFromDO(billerDO);
    
        // Assert
        assertNotNull(result);
        assertNotNull(result.getMaxUpdateTimestamp());
    }
........................................................
Computes and sets billerBehaviourCode in Biller:
    @Test
    public void test_compute_and_set_biller_behaviour_code() {
        // Arrange
        BillerDO billerDO = new BillerDO();
        BillerMapper billerMapper = new BillerMapper();
    
        // Act
        Biller result = billerMapper.prepareBillerFromDO(billerDO);
    
        // Assert
        assertNotNull(result);
        assertNotNull(result.getBillerBehaviourCode());
    }
........................................................
Handles BillerDO with empty subBillers list:
@Test
    public void test_prepare_biller_from_do_with_empty_subbillers_list() {
        // Arrange
        BillerDO billerDO = new BillerDO();
        billerDO.setSubBillers(Collections.emptyList());
    
        // Act
        Biller result = prepareBillerFromDO(billerDO);
    
        // Assert
        assertNull(result);
    }
........................................................
Verifies that the Biller object is correctly populated with all fields from BillerDO:
    @Test
    public void test_prepare_biller_from_do() {
        // Prepare BillerDO object
        BillerDO billerDO = new BillerDO();
        billerDO.setBillerId(UUID.randomUUID());
        billerDO.setMinAmount(BigDecimal.TEN);
        billerDO.setMaxAmount(BigDecimal.valueOf(100));
        billerDO.setSupportsPartialPayments(true);
        billerDO.setPartialMinAmount(BigDecimal.ONE);
        billerDO.setBillerName("Test Biller");
        billerDO.setProcessor("Test Processor");
        billerDO.setProcessorBillerId("12345");
        billerDO.setBillType("Test Type");
        billerDO.setBillerType("Test Biller Type");
        billerDO.setCanCheckBalance(true);
        billerDO.setPartialAcceptOnlyPesos(false);
        billerDO.setPrepaid(true);
        billerDO.setHoursToFulfill(24);
        billerDO.setBillerAccountNumber("1234567890");
        billerDO.setVendorId(9876);
        billerDO.setRedeemURL("http://test.com");
        billerDO.setTermsAndConditions("Test Terms");
        billerDO.setInformation("Test Information");
        billerDO.setMetaData(new byte[]{1, 0, 1});
        billerDO.setInputType(InputType.ALPHANUMERIC);
        billerDO.setInputPlaceholderText("Enter Text");
    
        // Mock the behavior of dependent methods
        when(billerMapper.mapBillerDOToBillerWithoutSubBillersAndBillPlans(any(BillerDO.class))).thenReturn(new Biller());
        when(billerMapper.mapBillPlans(any(BillerDO.class))).thenReturn(Collections.emptyList());
        when(billerMapper.mapSubBillerDOsToBillers(any(BillerDO.class))).thenReturn(Collections.emptyList());
        when(BillPayUtil.computeMaxUpdatedTimestampForBillerData(any(BillerDO.class))).thenReturn(LocalDateTime.now());
        when(BillPayUtil.getBillerBehaviourCode(any(Biller.class))).thenReturn("Test_Behaviour_Code");
    
        // Call the method under test
        Biller result = prepareBillerFromDO(billerDO);
    
        // Assertions
        assertNotNull(result);
        assertEquals(billerDO.getBillerId(), result.getBillerId());
        assertEquals(billerDO.getMinAmount(), result.getMinAmount());
        assertEquals(billerDO.getMaxAmount(), result.getMaxAmount());
        assertEquals(billerDO.getSupportsPartialPayments(), result.getSupportsPartialPayments());
        assertEquals(billerDO.getPartialMinAmount(), result.getPartialMinAmount());
        assertEquals(billerDO.getBillerName(), result.getBillerName());
        assertEquals(billerDO.getProcessor(), result.getProcessor());
        assertEquals(billerDO.getProcessorBillerId(), result.getProcessorBillerId());
        assertEquals(billerDO.getBillType(), result.getBillType());
        assertEquals(billerDO.getBillerType(), result.getBillerType());
        assertEquals(billerDO.getCanCheckBalance(), result.getCanCheckBalance());
        assertEquals(billerDO.getPartialAcceptOnlyPesos(), result.getPartialAcceptOnlyPesos());
        assertEquals(billerDO.getPrepaid(), result.getPrepaid());
        assertEquals(billerDO.getHoursToFulfill(), result.getHoursToFulfill());
        assertEquals(billerDO.getBillerAccountNumber(), result.getBillerAccountNumber());
        assertEquals(billerDO.getVendorId(), result.getVendorId());
        assertEquals(billerDO.getRedeemURL(), result.getRedeemURL());
        assertEquals(billerDO.getTermsAndConditions(), result.getTermsAndConditions());
        assertEquals(billerDO.getInformation(), result.getInformation());
        assertArrayEquals(billerDO.getMetaData(), result.getMetaData());
        assertEquals(billerDO.getInputType(), result.getInputType());
        assertEquals(billerDO.getInputPlaceholderText(), result.getInputPlaceholderText());
    }
........................................................
Checks if the maxUpdateTimestamp is correctly computed for complex nested structures:
    @Test
    public void test_prepare_biller_from_do_max_update_timestamp() {
        // Prepare
        BillerDO billerDO = new BillerDO();
        billerDO.setBillerId(UUID.randomUUID());
        billerDO.setMinAmount(BigDecimal.valueOf(10));
        billerDO.setMaxAmount(BigDecimal.valueOf(100));
        billerDO.setSupportsPartialPayments(true);
        billerDO.setPartialMinAmount(BigDecimal.valueOf(20));
        billerDO.setBillerName("Test Biller");
        billerDO.setProcessor("Test Processor");
        billerDO.setProcessorBillerId("12345");
        billerDO.setBillType("Test Bill Type");
        billerDO.setBillerType("Test Biller Type");
        billerDO.setCanCheckBalance(true);
        billerDO.setPartialAcceptOnlyPesos(true);
        billerDO.setPrepaid(true);
        billerDO.setHoursToFulfill(24);
        billerDO.setBillerAccountNumber("Test Account Number");
        billerDO.setVendorId(123);
        billerDO.setRedeemURL("Test Redeem URL");
        billerDO.setTermsAndConditions("Test Terms and Conditions");
        billerDO.setInformation("Test Information");
        billerDO.setMetaData(new byte[]{1, 0, 1});
        billerDO.setInputType(InputType.ALPHANUMERIC);
        billerDO.setInputPlaceholderText("Test Input Placeholder");
        billerDO.setParentBiller(null);
        billerDO.setSubBillers(Collections.emptyList());
        billerDO.setBillPlans(Collections.emptyList());
        billerDO.setCommission("Test Commission");
        billerDO.setProductDisplayName("Test Product Display Name");
        billerDO.setCountry("Test Country");
        billerDO.setCurrency("Test Currency");
        billerDO.setDisclaimer("Test Disclaimer");
        billerDO.setRedeemInstructions("Test Redeem Instructions");
        billerDO.setTopupCommission("Test Topup Commission");
        billerDO.setArcusAuthKeyVersion(1);
        billerDO.setEnabled(true);
        billerDO.setImageURL("Test Image URL");
        billerDO.setDisplayName("Test Display Name");
        billerDO.setTags("tag1;tag2;tag3");
        billerDO.setNewBiller(true);
        billerDO.setSubBillerShownAsProduct(true);
        billerDO.setAppDisplaySequenceNumber(1);
        billerDO.setAvailableTopupAmount("10,20,30");
        billerDO.setCustomAmountEnabled(true);
        billerDO.setPopularBillerSequenceNumber(1);

        // Test
        Biller result = prepareBillerFromDO(billerDO);

        // Verify
        assertNotNull(result);
    }
........................................................
........................................................
........................................................
Fetch biller categories from repository when versions are provided:
    @Test
    public void fetch_biller_categories_from_repository() {
        List<Integer> versions = Arrays.asList(1, 2, 3);
        List<BillerCategoryVersionMappingDO> mockResult = new ArrayList<>();
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(versions)).thenReturn(mockResult);

        Map<Integer, List<BillerCategory>> result = codeUnderTest.fetchAndCacheBillerCategoriesMap(versions);

        verify(billerCategoryVersionMappingRepository).getBillerCategoriesWithBillers(versions);
        assertNotNull(result);
    }
........................................................
Map fetched biller categories to domain objects using the mapper:
    @Test
    public void map_fetched_biller_categories_to_domain_objects() {
        List<BillerCategoryVersionMappingDO> mockResult = new ArrayList<>();
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(anyList())).thenReturn(mockResult);
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(mockResult)).thenReturn(new ArrayList<>());

        codeUnderTest.fetchAndCacheBillerCategoriesMap(Arrays.asList(1, 2, 3));

        verify(billerMapper).mapBillerCategoryVersionMappingsDOsToBillerCategoryList(mockResult);
    }
........................................................
Cache the mapped biller categories with appropriate cache keys:
    @Test
    public void cache_mapped_biller_categories_with_keys() {
        List<BillerCategory> billerCategories = new ArrayList<>();
        BillerCategory billerCategory = new BillerCategory();
        billerCategory.setBillerCategoryVersion(1);
        billerCategories.add(billerCategory);
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(anyList())).thenReturn(billerCategories);

        codeUnderTest.fetchAndCacheBillerCategoriesMap(Arrays.asList(1));

        verify(wmClient).set(eq("WPS_BILLER_CATEGORIES_MAP_1"), eq(0), anyList());
    }
........................................................
Handle empty or null input list of biller category versions:
    @Test
    public void test_handle_empty_or_null_input_list() {
        // Prepare
        List<Integer> emptyList = new ArrayList<>();
        List<Integer> nullList = null;

        // Execute
        Map<Integer, List<BillerCategory>> resultEmpty = code_under_test.fetchAndCacheBillerCategoriesMap(emptyList);
        Map<Integer, List<BillerCategory>> resultNull = code_under_test.fetchAndCacheBillerCategoriesMap(nullList);

        // Verify
        assertTrue(resultEmpty.isEmpty());
        assertTrue(resultNull.isEmpty());
    }
........................................................
Log successful cache operations:
    @Test
    public void test_fetch_and_cache_biller_categories_map() {
        List<Integer> billerCategoryVersions = Arrays.asList(1, 2, 3);
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = new ArrayList<>();
        BillerCategoryVersionMappingDO mapping1 = new BillerCategoryVersionMappingDO();
        mapping1.setCategoryVersionId(UUID.randomUUID());
        mapping1.setBillerCategory(new BillerCategoryDO());
        mapping1.setImageUrl("image1.jpg");
        mapping1.setBillerCategoryVersion(1);
        mapping1.setCategoryOrder(1);
        mapping1.setEnabled(true);
        billerCategoryVersionMappingDOList.add(mapping1);

        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);

        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = new HashMap<>();
        BillerCategory billerCategory = new BillerCategory();
        billerCategory.setId(UUID.randomUUID());
        billerCategory.setCategoryName("Test Category");
        billerCategory.setImageUrl("test.jpg");
        billerCategory.setBillerCategoryVersion(1);
        billerCategory.setHasEnabledBillers(true);
        billerCategory.setHasNewBillers(false);
        billerCategory.setBillers(new ArrayList<>());
        List<BillerCategory> billerCategoriesList = Collections.singletonList(billerCategory);
        versionToBillerCategoriesMap.put(1, billerCategoriesList);

        Map<Integer, List<BillerCategory>> expectedMap = new HashMap<>();
        expectedMap.put(1, billerCategoriesList);

        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(billerCategoryVersionMappingDOList)).thenReturn(billerCategoriesList);

        BillerCategoryVersionMappingDO mapping2 = new BillerCategoryVersionMappingDO();
        mapping2.setCategoryVersionId(UUID.randomUUID());
        mapping2.setBillerCategory(new BillerCategoryDO());
        mapping2.setImageUrl("image2.jpg");
        mapping2.setBillerCategoryVersion(2);
        mapping2.setCategoryOrder(2);
        mapping2.setEnabled(true);

        versionToBillerCategoriesMap.put(2, new ArrayList<>());
    
        wmClient = mock(WmClient.class);
    
        for (Map.Entry<Integer, List<BillerCategory>> entry : versionToBillerCategoriesMap.entrySet()) {
            String cacheKey = WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + entry.getKey();
            OperationFuture<Boolean> operationFuture = mock(OperationFuture.class);
            when(wmClient.set(cacheKey, 0, entry.getValue())).thenReturn(operationFuture);
            operationFuture.addListener(res -> log.info("Added key - {} with val - {} --- status - {}", cacheKey, entry.getValue(), res.getStatus()));
        }

        BillerCoreService service = new BillerCoreService();
        service.billerMapper = mock(BillerMapper.class);
        service.billerCategoryVersionMappingRepository = mock(BillerCategoryVersionMappingRepository.class);
        service.wmClient = wmClient;

        Map<Integer, List<BillerCategory>> result = service.fetchAndCacheBillerCategoriesMap(billerCategoryVersions);

        assertEquals(expectedMap, result);
    }
........................................................
Verify the correct mapping of biller categories to their versions:
    @Test
    public void test_fetch_and_cache_biller_categories_map() {
        List<Integer> billerCategoryVersions = Arrays.asList(1, 2, 3);
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = new ArrayList<>();
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);

        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = new HashMap<>();
        List<BillerCategory> billerCategoriesList = new ArrayList<>();
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(billerCategoryVersionMappingDOList)).thenReturn(billerCategoriesList);
        versionToBillerCategoriesMap.put(1, billerCategoriesList);

        when(wmClient.set(eq("WPS_BILLER_CATEGORIES_MAP_1"), eq(0), eq(billerCategoriesList))).thenReturn(new OperationFuture<Boolean>());

        Map<Integer, List<BillerCategory>> result = code_under_test.fetchAndCacheBillerCategoriesMap(billerCategoryVersions);

        assertEquals(versionToBillerCategoriesMap, result);
        verify(wmClient, times(1)).set(eq("WPS_BILLER_CATEGORIES_MAP_1"), eq(0), eq(billerCategoriesList));
    }
........................................................
Ensure the cache operation listener logs the correct status:
    @Test
    public void test_fetch_and_cache_biller_categories_map() {
        List<Integer> billerCategoryVersions = Arrays.asList(1, 2, 3);
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = new ArrayList<>();
        BillerCategoryVersionMappingDO mappingDO1 = new BillerCategoryVersionMappingDO();
        mappingDO1.setBillerCategoryVersion(1);
        BillerCategoryVersionMappingDO mappingDO2 = new BillerCategoryVersionMappingDO();
        mappingDO2.setBillerCategoryVersion(2);
        billerCategoryVersionMappingDOList.add(mappingDO1);
        billerCategoryVersionMappingDOList.add(mappingDO2);

        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);

        List<BillerCategory> billerCategoriesList = new ArrayList<>();
        BillerCategory billerCategory1 = new BillerCategory();
        billerCategory1.setBillerCategoryVersion(1);
        BillerCategory billerCategory2 = new BillerCategory();
        billerCategory2.setBillerCategoryVersion(2);
        billerCategoriesList.add(billerCategory1);
        billerCategoriesList.add(billerCategory2);

        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = new HashMap<>();
        versionToBillerCategoriesMap.put(1, Collections.singletonList(billerCategory1));
        versionToBillerCategoriesMap.put(2, Collections.singletonList(billerCategory2));

        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(billerCategoryVersionMappingDOList)).thenReturn(billerCategoriesList);

        Map<Integer, List<BillerCategory>> result = code_under_test.fetchAndCacheBillerCategoriesMap(billerCategoryVersions);

        assertEquals(versionToBillerCategoriesMap, result);

        verify(wmClient, times(2)).set(anyString(), anyInt(), any());
        verify(log, times(2)).info(anyString(), anyString(), any(), any());
    }
    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }
........................................................
Validate the structure of the returned map:
    @Test
    public void test_fetch_and_cache_biller_categories_map() {
        // Prepare
        List<Integer> billerCategoryVersions = Arrays.asList(1, 2, 3);
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = new ArrayList<>();
        BillerCategoryVersionMappingDO mapping1 = new BillerCategoryVersionMappingDO();
        mapping1.setCategoryVersionId(UUID.randomUUID());
        mapping1.setBillerCategory(new BillerCategoryDO());
        mapping1.setImageUrl("image1.jpg");
        mapping1.setBillerCategoryVersion(1);
        mapping1.setCategoryOrder(1);
        mapping1.setEnabled(true);
        billerCategoryVersionMappingDOList.add(mapping1);

        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);

        List<BillerCategory> billerCategoriesList = new ArrayList<>();
        BillerCategory billerCategory = new BillerCategory();
        billerCategory.setId(UUID.randomUUID());
        billerCategory.setCategoryName("Category 1");
        billerCategory.setImageUrl("image1.jpg");
        billerCategory.setBillerCategoryVersion(1);
        billerCategory.setHasEnabledBillers(true);
        billerCategory.setHasNewBillers(false);
        billerCategoriesList.add(billerCategory);

        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = new HashMap<>();
        versionToBillerCategoriesMap.put(1, billerCategoriesList);

        // Act
        Map<Integer, List<BillerCategory>> result = code_under_test.fetchAndCacheBillerCategoriesMap(billerCategoryVersions);

        // Assert
        assertEquals(versionToBillerCategoriesMap.size(), result.size());
        assertTrue(result.containsKey(1));
        assertEquals(versionToBillerCategoriesMap.get(1).size(), result.get(1).size());
        assertEquals(versionToBillerCategoriesMap.get(1).get(0).getCategoryName(), result.get(1).get(0).getCategoryName());
    }
........................................................
Verifies that the log messages are generated correctly during cache operations:
    @Test
    public void test_fetch_and_cache_biller_categories_map() {
        List<Integer> billerCategoryVersions = Arrays.asList(1, 2, 3);
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = new ArrayList<>();
        BillerCategoryVersionMappingDO mappingDO1 = new BillerCategoryVersionMappingDO();
        mappingDO1.setCategoryVersionId(UUID.randomUUID());
        mappingDO1.setBillerCategory(new BillerCategoryDO());
        mappingDO1.setImageUrl("image_url_1");
        mappingDO1.setBillerCategoryVersion(1);
        mappingDO1.setCategoryOrder(1);
        mappingDO1.setEnabled(true);
        billerCategoryVersionMappingDOList.add(mappingDO1);

        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);

        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = new HashMap<>();
        BillerCategory billerCategory = new BillerCategory();
        billerCategory.setId(UUID.randomUUID());
        billerCategory.setCategoryName("Test Category");
        billerCategory.setImageUrl("test_image_url");
        billerCategory.setBillerCategoryVersion(1);
        billerCategory.setHasEnabledBillers(true);
        billerCategory.setHasNewBillers(false);
        billerCategory.setBillers(new ArrayList<>());
        List<BillerCategory> billerCategoriesList = Collections.singletonList(billerCategory);
        versionToBillerCategoriesMap.put(1, billerCategoriesList);

        Map<Integer, List<BillerCategory>> expectedMap = new HashMap<>();
        expectedMap.put(1, billerCategoriesList);

        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(billerCategoryVersionMappingDOList)).thenReturn(billerCategoriesList);

        BillerCategoryVersionMappingDO mappingDO2 = new BillerCategoryVersionMappingDO();
        mappingDO2.setCategoryVersionId(UUID.randomUUID());
        mappingDO2.setBillerCategory(new BillerCategoryDO());
        mappingDO2.setImageUrl("image_url_2");
        mappingDO2.setBillerCategoryVersion(2);
        mappingDO2.setCategoryOrder(2);
        mappingDO2.setEnabled(true);

        List<BillerCategory> billerCategoriesList2 = new ArrayList<>();
        BillerCategory billerCategory2 = new BillerCategory();
        billerCategory2.setId(UUID.randomUUID());
        billerCategory2.setCategoryName("Test Category 2");
        billerCategory2.setImageUrl("test_image_url_2");
        billerCategory2.setBillerCategoryVersion(2);
        billerCategory2.setHasEnabledBillers(true);
        billerCategory2.setHasNewBillers(false);
        billerCategory2.setBillers(new ArrayList<>());
        billerCategoriesList2.add(billerCategory2);

        versionToBillerCategoriesMap.put(2, billerCategoriesList2);

        expectedMap.put(2, billerCategoriesList2);

        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(Collections.singletonList(mappingDO2))).thenReturn(billerCategoriesList2);

        wmClient = mock(WmClient.class);

        OperationFuture<Boolean> operationFuture1 = mock(OperationFuture.class);
        when(wmClient.set(WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + 1, 0, billerCategoriesList)).thenReturn(operationFuture1);

        OperationFuture<Boolean> operationFuture2 = mock(OperationFuture.class);
        when(wmClient.set(WPSConstants.Biller.BILLER_CATEGORIES_MAP_CACHE_KEY + 2, 0, billerCategoriesList2)).thenReturn(operationFuture2);

        when(operationFuture1.addListener(any())).thenReturn(operationFuture1);
        when(operationFuture2.addListener(any())).thenReturn(operationFuture2);

        BillerCoreService service = new BillerCoreService();
        service.billerMapper = mock(BillerMapper.class);
        service.billerCategoryVersionMappingRepository = mock(BillerCategoryVersionMappingRepository.class);
        service.wmClient = wmClient;

        Map<Integer, List<BillerCategory>> result = service.fetchAndCacheBillerCategoriesMap(billerCategoryVersions);

        assertEquals(expectedMap, result);

        verify(billerMapper, times(1)).mapBillerCategoryVersionMappingsDOsToBillerCategoryList(billerCategoryVersionMappingDOList);
    }
........................................................
Ensures cache keys are generated correctly using WPSConstants:
    @Test
    public void test_fetch_and_cache_biller_categories_map() {
        List<Integer> billerCategoryVersions = Arrays.asList(1, 2, 3);
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = new ArrayList<>();
        BillerCategoryVersionMappingDO mappingDO1 = new BillerCategoryVersionMappingDO();
        mappingDO1.setBillerCategoryVersion(1);
        BillerCategoryVersionMappingDO mappingDO2 = new BillerCategoryVersionMappingDO();
        mappingDO2.setBillerCategoryVersion(2);
        billerCategoryVersionMappingDOList.add(mappingDO1);
        billerCategoryVersionMappingDOList.add(mappingDO2);

        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);

        List<BillerCategory> billerCategoriesList = new ArrayList<>();
        BillerCategory billerCategory1 = new BillerCategory();
        billerCategory1.setBillerCategoryVersion(1);
        BillerCategory billerCategory2 = new BillerCategory();
        billerCategory2.setBillerCategoryVersion(2);
        billerCategoriesList.add(billerCategory1);
        billerCategoriesList.add(billerCategory2);

        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(billerCategoryVersionMappingDOList)).thenReturn(billerCategoriesList);

        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = new HashMap<>();
        versionToBillerCategoriesMap.put(1, Collections.singletonList(billerCategory1));
        versionToBillerCategoriesMap.put(2, Collections.singletonList(billerCategory2));

        when(wmClient.set(anyString(), anyInt(), any())).thenReturn(new OperationFuture<Boolean>());

        Map<Integer, List<BillerCategory>> result = code_under_test.fetchAndCacheBillerCategoriesMap(billerCategoryVersions);

        assertEquals(versionToBillerCategoriesMap, result);
    }
........................................................
Handles empty list of billerCategoryVersions gracefully:
    @Test
    public void handles_empty_list_of_biller_category_versions() {
        List<Integer> versions = Collections.emptyList();
    
        Map<Integer, List<BillerCategory>> result = codeUnderTest.fetchAndCacheBillerCategoriesMap(versions);
    
        assertTrue(result.isEmpty());
        verifyNoInteractions(billerCategoryVersionMappingRepository, billerMapper, wmClient);
    }
........................................................
Returns the versionToBillerCategoriesMap with the correct mappings:
    @Test
    public void returns_correct_version_to_biller_categories_map() {
        List<Integer> versions = List.of(1, 2, 3);
        List<BillerCategoryVersionMappingDO> mockMappings = List.of(new BillerCategoryVersionMappingDO());
        List<BillerCategory> mockCategories = List.of(new BillerCategory());
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(versions)).thenReturn(mockMappings);
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(mockMappings)).thenReturn(mockCategories);
    
        Map<Integer, List<BillerCategory>> result = codeUnderTest.fetchAndCacheBillerCategoriesMap(versions);
    
        assertEquals(mockCategories, result.get(mockCategories.get(0).getBillerCategoryVersion()));
    }
........................................................
Maps fetched biller categories to domain model using billerMapper:
    @Test
    public void maps_fetched_biller_categories_to_domain_model() {
        List<Integer> versions = List.of(1, 2, 3);
        List<BillerCategoryVersionMappingDO> mockMappings = List.of(new BillerCategoryVersionMappingDO());
        when(billerCategoryVersionMappingRepository.getBillerCategoriesWithBillers(versions)).thenReturn(mockMappings);
        when(billerMapper.mapBillerCategoryVersionMappingsDOsToBillerCategoryList(mockMappings)).thenReturn(List.of(new BillerCategory()));
    
        codeUnderTest.fetchAndCacheBillerCategoriesMap(versions);
    
        verify(billerMapper).mapBillerCategoryVersionMappingsDOsToBillerCategoryList(mockMappings);
    }
........................................................

........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................
