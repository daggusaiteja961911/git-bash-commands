{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red174\green176\blue183;\red23\green23\blue26;\red164\green160\blue78;
\red195\green123\blue90;\red185\green101\blue173;\red71\green149\blue242;\red89\green158\blue96;\red38\green157\blue169;
\red103\green107\blue114;}
{\*\expandedcolortbl;;\csgenericrgb\c68235\c69020\c71765;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c64314\c62745\c30588;
\csgenericrgb\c76471\c48235\c35294;\csgenericrgb\c72549\c39608\c67843;\csgenericrgb\c27843\c58431\c94902;\csgenericrgb\c34902\c61961\c37647;\csgenericrgb\c14902\c61569\c66275;
\csgenericrgb\c40392\c41961\c44706;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \

\f1 \cf4 @ExtendWith\cf2 (MockitoExtension.\cf5 class\cf2 )\
\cf5 class \cf2 BillerCoreServiceTest \{\
\
    \cf4 @Mock\
    \cf5 public \cf2 BillerRepository \cf6 billerRepository\cf2 ;\
\
    \cf4 @Mock\
    \cf5 public \cf2 WmClient \cf6 wmClient\cf2 ;\
\
    \cf4 @Mock\
    \cf5 public \cf2 BillerCategoryVersionMappingRepository \cf6 billerCategoryVersionMappingRepository\cf2 ;\
\
    \cf4 @Mock\
    \cf5 public \cf2 BillerSearchRepository \cf6 billerSearchRepository\cf2 ;\
\
    \cf4 @Spy\
    @InjectMocks\
    \cf5 public \cf2 BillerCoreService \cf6 billerCoreService\cf2 ;\
\
    \cf4 @Mock\
    \cf5 public \cf2 BillerMapper \cf6 billerMapper\cf2 ;\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerDataFromCache\cf2 () \cf5 throws \cf2 ApplicationException \{\
        String processorBillerId = \cf8 "123"\cf2 ;\
        String cacheKey = processorBillerId + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA
\f1\i0 \cf2 ;\
        Biller expectedBiller = \cf5 new \cf2 Biller();\
\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(cacheKey)).thenReturn(expectedBiller);\
\
        Biller result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(processorBillerId);\
\
        
\f2\i assertEquals
\f1\i0 (expectedBiller, result);\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).get(cacheKey);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionsDuringCacheFetch\cf2 () \cf5 throws \cf2 ApplicationException \{\
        String processorBillerId = \cf8 "123"\cf2 ;\
        String cachKey = processorBillerId + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA
\f1\i0 \cf2 ;\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(cachKey)).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Cache fetch error"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ApplicationException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(\cf6 processorBillerId\cf2 );\
        \});\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).get(cachKey);\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleNullBillerId\cf2 () \cf5 throws \cf2 ApplicationException \{\
        String processorBillerId = \cf8 "999988"\cf2 ;\
        String cacheKey = processorBillerId + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA
\f1\i0 \cf2 ;\
        Biller expectedBiller = \cf5 new \cf2 Biller();\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(cacheKey)).thenReturn(expectedBiller);\
\
        Biller result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(\cf5 null\cf2 , processorBillerId);\
\
        
\f2\i assertEquals
\f1\i0 (expectedBiller, result);\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).get(cacheKey);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerDataFromCacheUsingBillerId\cf2 () \{\
        UUID billerId = UUID.
\f2\i randomUUID
\f1\i0 ();\
        String processorBillerId = \cf5 null\cf2 ;\
        Biller expecetedBiller = MockUtils.
\f2\i getBiller
\f1\i0 ();\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(billerId + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA
\f1\i0 \cf2 )).thenReturn(expecetedBiller);\
\
        Biller result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(billerId, processorBillerId);\
\
        
\f2\i assertEquals
\f1\i0 (expecetedBiller, result);\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 ).get(billerId + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA
\f1\i0 \cf2 );\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_Fetch_BillerDataFromCacheUsingProcessorBillerId\cf2 () \{\
        UUID billerId = \cf5 null\cf2 ;\
        String processorBillerId = \cf8 "processor123"\cf2 ;\
        Biller expecetedBiller = MockUtils.
\f2\i getBiller
\f1\i0 ();\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(processorBillerId + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA
\f1\i0 \cf2 )).thenReturn(expecetedBiller);\
\
        Biller result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(billerId, processorBillerId);\
\
        
\f2\i assertEquals
\f1\i0 (expecetedBiller, result);\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 ).get(processorBillerId + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA
\f1\i0 \cf2 );\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionsFetchingBillerDataFromCache\cf2 () \{\
        UUID billerId = UUID.
\f2\i randomUUID
\f1\i0 ();\
        String processorBillerId = \cf8 "12345"\cf2 ;\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getByBillerIdAndEnabled(
\f2\i any
\f1\i0 (UUID.\cf5 class\cf2 ), 
\f2\i anyBoolean
\f1\i0 ())).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "DB connection error"\cf2 ));\
\
        ApplicationException exception = 
\f2\i assertThrows
\f1\i0 (ApplicationException.\cf5 class\cf2 , () -> \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(\cf6 billerId\cf2 , \cf6 processorBillerId\cf2 ));\
\
        
\f2\i assertEquals
\f1\i0 (\cf8 "Exception while fetching billerDO from DB for billerId: [" \cf2 + billerId + \cf8 "]"\cf2 , exception.getMessage());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionsFetchingBillerDataFromCache_2\cf2 () \{\
        UUID billerId = UUID.
\f2\i randomUUID
\f1\i0 ();\
        String processorBillerId = \cf8 "12345"\cf2 ;\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(
\f2\i anyString
\f1\i0 ())).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "DB connection error"\cf2 ));\
\
        ApplicationException exception = 
\f2\i assertThrows
\f1\i0 (ApplicationException.\cf5 class\cf2 , () -> \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(\cf6 billerId\cf2 , \cf6 processorBillerId\cf2 ));\
\
        
\f2\i assertEquals
\f1\i0 (\cf8 "Biller record not found/not enabled for billerId: [" \cf2 + billerId + \cf8 "]"\cf2 , exception.getMessage());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionsFetchingBillerData\cf2 () \{\
        UUID billerId = UUID.
\f2\i randomUUID
\f1\i0 ();\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getByBillerIdAndEnabled(
\f2\i any
\f1\i0 (UUID.\cf5 class\cf2 ), 
\f2\i anyBoolean
\f1\i0 ())).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "DB connection error"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(\cf6 billerId\cf2 , \cf5 null\cf2 );\
        \});\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionsFetchingProcessorBillerData\cf2 () \{\
        String processorBillerId = \cf8 "12345"\cf2 ;\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getByProcessorBillerIdAndEnabled(
\f2\i any
\f1\i0 (), 
\f2\i anyBoolean
\f1\i0 ())).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "DB connection error"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(\cf5 null\cf2 , \cf6 processorBillerId\cf2 );\
        \});\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 null_biller_id_processor_id\cf2 () \cf5 throws \cf2 ApplicationException \{\
        UUID billerId = \cf5 null\cf2 ;\
        String processorBillerId = \cf5 null\cf2 ;\
\
        Biller result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerData(billerId, processorBillerId);\
\
        
\f2\i assertNull
\f1\i0 (result);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerCategoriesListFromCacheUsingVersion\cf2 () \{\
        \cf5 int \cf2 billerCategoryVersion = \cf9 1\cf2 ;\
\
        List<BillerCategory> expectedBillerCategories = \cf5 null\cf2 ;\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(WPSConstants.Biller.
\f2\i \cf6 BILLER_CATEGORIES_MAP_CACHE_KEY 
\f1\i0 \cf2 + billerCategoryVersion)).thenReturn(expectedBillerCategories);\
\
        List<BillerCategory> actualBillerCategories = \cf6 billerCoreService\cf2 .getBillerCategoriesList(billerCategoryVersion);\
\
        
\f2\i assertEquals
\f1\i0 (expectedBillerCategories, actualBillerCategories);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandlingExceptionsGetBillerCategoriesList\cf2 () \{\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(
\f2\i anyString
\f1\i0 ())).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "simulating exceptions"\cf2 ));\
\
        List<BillerCategory> result = \cf6 billerCoreService\cf2 .getBillerCategoriesList(\cf9 1\cf2 );\
\
        
\f2\i assertNull
\f1\i0 (result);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchAndCacheBillerCategoriesMapWithException\cf2 () \{\
        List<Integer> billerCategoryVersions = Arrays.
\f2\i asList
\f1\i0 (\cf9 1\cf2 , \cf9 2\cf2 , \cf9 3\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 billerCategoryVersionMappingRepository\cf2 .getBillerCategoriesWithBillers(billerCategoryVersions)).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "DB Connection error"\cf2 ));\
\
        ProcessingException exception = 
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \cf6 billerCoreService\cf2 .fetchAndCacheBillerCategoriesMap(\cf6 billerCategoryVersions\cf2 ));\
\
        
\f2\i assertEquals
\f1\i0 (ErrorConstants.Common.
\f2\i \cf6 BILLER_CATEGORY_VERSION_MAPPING_DB_FETCH_ERROR
\f1\i0 \cf2 , exception.getErrorCode());\
        
\f2\i assertFalse
\f1\i0 (exception.getMessage().contains(\cf8 "Error while fetching BillerCategoryVersionsMapping data from DB for billerCategoryVersions"\cf2 ));\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 fetch_biller_categories_from_repository\cf2 () \{\
        List<Integer> versions = Arrays.
\f2\i asList
\f1\i0 (\cf9 1\cf2 , \cf9 2\cf2 , \cf9 3\cf2 );\
        List<BillerCategoryVersionMappingDO> mockResult = \cf5 new \cf2 ArrayList<>();\
        
\f2\i when
\f1\i0 (\cf6 billerCategoryVersionMappingRepository\cf2 .getBillerCategoriesWithBillers(versions)).thenReturn(mockResult);\
\
        Map<Integer, List<BillerCategory>> result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerCategoriesMap(versions);\
\
        
\f2\i verify
\f1\i0 (\cf6 billerCategoryVersionMappingRepository\cf2 ).getBillerCategoriesWithBillers(versions);\
        
\f2\i assertNotNull
\f1\i0 (result);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchAndCacheBillerCategoriesMap\cf2 () \{\
        List<Integer> billerCategoryVersions = Arrays.
\f2\i asList
\f1\i0 (\cf9 1\cf2 , \cf9 2\cf2 , \cf9 3\cf2 );\
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = \cf5 new \cf2 ArrayList<>();\
        BillerCategoryVersionMappingDO mappingDO1 = \cf5 new \cf2 BillerCategoryVersionMappingDO();\
        mappingDO1.setBillerCategoryVersion(\cf9 1\cf2 );\
        BillerCategoryVersionMappingDO mappingDO2 = \cf5 new \cf2 BillerCategoryVersionMappingDO();\
        mappingDO2.setBillerCategoryVersion(\cf9 2\cf2 );\
        billerCategoryVersionMappingDOList.add(mappingDO1);\
        billerCategoryVersionMappingDOList.add(mappingDO2);\
        OperationFuture operationFuture = 
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 );\
\
        
\f2\i when
\f1\i0 (\cf6 billerCategoryVersionMappingRepository\cf2 .getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);\
\
        List<BillerCategory> billerCategoriesList = \cf5 new \cf2 ArrayList<>();\
        BillerCategory billerCategory1 = \cf5 new \cf2 BillerCategory();\
        billerCategory1.setBillerCategoryVersion(\cf9 1\cf2 );\
        BillerCategory billerCategory2 = \cf5 new \cf2 BillerCategory();\
        billerCategory2.setBillerCategoryVersion(\cf9 2\cf2 );\
        billerCategoriesList.add(billerCategory1);\
        billerCategoriesList.add(billerCategory2);\
\
        
\f2\i when
\f1\i0 (\cf6 billerMapper\cf2 .mapBillerCategoryVersionMappingsDOsToBillerCategoryList(billerCategoryVersionMappingDOList)).thenReturn(billerCategoriesList);\
\
        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = \cf5 new \cf2 HashMap<>();\
        versionToBillerCategoriesMap.put(\cf9 1\cf2 , Collections.
\f2\i singletonList
\f1\i0 (billerCategory1));\
        versionToBillerCategoriesMap.put(\cf9 2\cf2 , Collections.
\f2\i singletonList
\f1\i0 (billerCategory2));\
\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .set(
\f2\i anyString
\f1\i0 (), 
\f2\i anyInt
\f1\i0 (), 
\f2\i any
\f1\i0 ())).thenReturn(operationFuture);\
\
        Map<Integer, List<BillerCategory>> result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerCategoriesMap(billerCategoryVersions);\
\
        
\f2\i assertEquals
\f1\i0 (versionToBillerCategoriesMap, result);\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchAndCacheBillerCategoriesMap_2\cf2 () \{\
        List<Integer> billerCategoryVersions = Arrays.
\f2\i asList
\f1\i0 (\cf9 1\cf2 , \cf9 2\cf2 , \cf9 3\cf2 );\
        List<BillerCategoryVersionMappingDO> billerCategoryVersionMappingDOList = \cf5 new \cf2 ArrayList<>();\
        BillerCategoryVersionMappingDO mapping1 = MockUtils.
\f2\i getBillerCategoryVersionMappingDO
\f1\i0 ();\
        billerCategoryVersionMappingDOList.add(mapping1);\
\
        
\f2\i when
\f1\i0 (\cf6 billerCategoryVersionMappingRepository\cf2 .getBillerCategoriesWithBillers(billerCategoryVersions)).thenReturn(billerCategoryVersionMappingDOList);\
\
        List<BillerCategory> billerCategoriesList = \cf5 new \cf2 ArrayList<>();\
        BillerCategory billerCategory = MockUtils.
\f2\i getBillerCategory
\f1\i0 ();\
        billerCategoriesList.add(billerCategory);\
\
        Map<Integer, List<BillerCategory>> versionToBillerCategoriesMap = \cf5 new \cf2 HashMap<>();\
        versionToBillerCategoriesMap.put(\cf9 1\cf2 , billerCategoriesList);\
\
        Map<Integer, List<BillerCategory>> result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerCategoriesMap(billerCategoryVersions);\
\
        
\f2\i assertNotEquals
\f1\i0 (versionToBillerCategoriesMap.size(), result.size());\
        
\f2\i assertFalse
\f1\i0 (result.containsKey(\cf9 1\cf2 ));\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_MethodHandlesExceptionsForFetchAndCacheBillerCategoriesMap\cf2 () \{\
        List<Integer> billerCategoryVersions = Arrays.
\f2\i asList
\f1\i0 (\cf9 1\cf2 , \cf9 2\cf2 , \cf9 3\cf2 );\
        
\f2\i doThrow
\f1\i0 (\cf5 new \cf2 RuntimeException(\cf8 "Error fetching and caching biller categories map"\cf2 ))\
                .when(\cf6 billerCoreService\cf2 ).fetchAndCacheBillerCategoriesMap(billerCategoryVersions);\
\
        
\f2\i assertThrows
\f1\i0 (RuntimeException.\cf5 class\cf2 , () -> \cf6 billerCoreService\cf2 .reloadCacheForBillerCategoryData(\cf6 billerCategoryVersions\cf2 ));\
\
    \}\
    \cf4 @Test\
     \cf5 void \cf7 shouldTest_FetchAndCacheBillerCategoryDataUpdatedAtTimestamp_successfulCaching\cf2 () \{\
        List<Integer> billerCategoryVersions = List.
\f2\i of
\f1\i0 (\cf9 1\cf2 , \cf9 2\cf2 , \cf9 3\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .set(
\f2\i anyString
\f1\i0 (), 
\f2\i anyInt
\f1\i0 (), 
\f2\i any
\f1\i0 ())).thenReturn(
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 ));\
        \cf6 billerCoreService\cf2 .reloadCacheForBillerCategoryData(billerCategoryVersions);\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).set(
\f2\i anyString
\f1\i0 (), 
\f2\i anyInt
\f1\i0 (), 
\f2\i any
\f1\i0 ());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchesTimestampFromCacheSuccessfully\cf2 () \{\
        Date expectedDate = \cf5 new \cf2 Date();\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(WPSConstants.Biller.
\f2\i \cf6 BILLER_CATEGORY_DATA_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 )).thenReturn(expectedDate);\
\
        Date result = \cf6 billerCoreService\cf2 .fetchBillerCategoryDataLastUpdatedAtTimestamp();\
\
        
\f2\i assertEquals
\f1\i0 (expectedDate, result);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_CacheFetchThrowsException\cf2 () \{\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(WPSConstants.Biller.
\f2\i \cf6 BILLER_CATEGORY_DATA_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 )).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "simulating cache miss"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (RuntimeException.\cf5 class\cf2 , () -> \cf6 billerCoreService\cf2 .fetchBillerCategoryDataLastUpdatedAtTimestamp());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_RepositoryThrowsExeptionWhileFetchingTimestamp\cf2 () \{\
        
\f2\i when
\f1\i0 (\cf6 billerCategoryVersionMappingRepository\cf2 .getBillerCategoryDataUpdateTimestamp()).thenThrow(RuntimeException.\cf5 class\cf2 );\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchAndCacheBillerCategoryDataUpdatedAtTimestamp();\
        \});\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchAndCacheBillerCategoryDataUpdatedAtTimestamp\cf2 () \{\
        Date expectedDate = \cf5 new \cf2 Date();\
        OperationFuture<Boolean> operationFuture = 
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .set((WPSConstants.Biller.
\f2\i \cf6 BILLER_CATEGORY_DATA_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 ), (\cf9 0\cf2 ), (expectedDate))).thenReturn(operationFuture);\
        
\f2\i when
\f1\i0 (\cf6 billerCategoryVersionMappingRepository\cf2 .getBillerCategoryDataUpdateTimestamp()).thenReturn(expectedDate);\
\
        Date result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerCategoryDataUpdatedAtTimestamp();\
\
        
\f2\i assertEquals
\f1\i0 (expectedDate, result);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerDataLastUpdatedAtMapAllDataInCache\cf2 () \{\
        List<UUID> billerIds = Collections.
\f2\i singletonList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 ());\
        List<String> processorBillerids = Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
        Map<String, Object> cacheData = \cf5 new \cf2 HashMap<>();\
        cacheData.put(\cf8 "123_WPS_BILLER_DATA_UPDATED_AT"\cf2 , LocalDateTime.
\f2\i now
\f1\i0 ());\
        cacheData.put(\cf8 "456_WPS_BILLER_DATA_UPDATED_AT"\cf2 , LocalDateTime.
\f2\i now
\f1\i0 ());\
\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .getBulk(
\f2\i anyList
\f1\i0 ())).thenReturn(cacheData);\
\
        Map<String, Object> result = \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerids);\
        
\f2\i assertEquals
\f1\i0 (\cf9 2\cf2 , result.size());\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).getBulk(
\f2\i anyList
\f1\i0 ());\
\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleNoBillerDataFoundInDatabaseEmptyBillerIds\cf2 () \{\
        List<UUID> billerIds = Collections.
\f2\i emptyList
\f1\i0 ();\
        List<String> processorBillerIds = Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
        Map<String, Object> expectedMap = \cf5 new \cf2 HashMap<>();\
\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .getBulk(
\f2\i anyList
\f1\i0 ())).thenReturn(\cf5 new \cf2 HashMap<>());\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillersInfoByProcessorBillerIds(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 false\cf2 ))).thenReturn(Collections.
\f2\i emptyList
\f1\i0 ());\
\
        Map<String, Object> result = \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);\
\
        
\f2\i assertEquals
\f1\i0 (expectedMap, result);\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).getBulk(
\f2\i anyList
\f1\i0 ());\
        
\f2\i verify
\f1\i0 (\cf6 billerRepository\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).getBillersInfoByProcessorBillerIds(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 false\cf2 ));\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionsDuringDBFetch\cf2 () \{\
        List<UUID> billerIds = Arrays.
\f2\i asList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 (), UUID.
\f2\i randomUUID
\f1\i0 ());\
        List<String> processorBillerIds = Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
\
        Map<String, Object> expectedOutput = \cf5 new \cf2 HashMap<>();\
\
        Map<String, Object> result = \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);\
\
        
\f2\i assertEquals
\f1\i0 (expectedOutput, result);\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_ReloadCacheForBillerDataHandlesExceptions_2\cf2 () \{\
        List<UUID> billerIds = Collections.
\f2\i singletonList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 ());\
        List<String> processorBillerids = Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillersInfoByBillerId(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 true\cf2 ))).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Database connection error"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(\cf6 billerIds\cf2 , \cf6 processorBillerids\cf2 );\
        \});\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_ReloadCacheForBillerDataHandlesExceptions_3\cf2 () \{\
        List<UUID> billerIds = \cf5 null\cf2 ;\
        List<String> processorBillerids = Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillersInfoByProcessorBillerIds(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 false\cf2 ))).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Database connection error"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(\cf6 billerIds\cf2 , \cf6 processorBillerids\cf2 );\
        \});\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandlesCacheFetchExceptions\cf2 () \{\
        List<UUID> billerIds = Arrays.
\f2\i asList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 (), UUID.
\f2\i randomUUID
\f1\i0 ());\
        List<String> processorBillerIds = Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .getBulk(
\f2\i anyList
\f1\i0 ())).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Mocked Exceptions"\cf2 ));\
        Map<String, Object> result = \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);\
\
        
\f2\i assertTrue
\f1\i0 (result.isEmpty());\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerDataFromDBForBillerIdsNotPresentInCache\cf2 () \{\
        List<UUID> billerIds = Collections.
\f2\i emptyList
\f1\i0 ();\
        List<String> processorBillerIds = Arrays.
\f2\i asList
\f1\i0 (\cf8 "processorBillerId1"\cf2 , \cf8 "processorBillerId2"\cf2 );\
        Map<String, Object> cacheData = \cf5 new \cf2 HashMap<>();\
        cacheData.put(processorBillerIds.get(\cf9 0\cf2 ) + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA_UPDATED_AT
\f1\i0 \cf2 , LocalDateTime.
\f2\i now
\f1\i0 ());\
\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .getBulk(
\f2\i anyList
\f1\i0 ())).thenReturn(cacheData);\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillersInfoByProcessorBillerIds(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 false\cf2 ))).thenReturn(\cf5 null\cf2 );\
\
        Map<String, Object> result = \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);\
\
        
\f2\i assertFalse
\f1\i0 (result.size() > \cf9 1\cf2 );\
        \cf10 //assertNotNull(result);\
    \cf2 \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerDataFromDBForBillerIdsPresentInCache\cf2 () \{\
        List<UUID> billerIds = Arrays.
\f2\i asList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 (), UUID.
\f2\i randomUUID
\f1\i0 ());\
        List<String> processorBillerIds = Arrays.
\f2\i asList
\f1\i0 (\cf8 "processorBillerId1"\cf2 , \cf8 "processorBillerId2"\cf2 );\
        Map<String, Object> cachedata = \cf5 new \cf2 HashMap<>();\
        cachedata.put(billerIds.get(\cf9 0\cf2 ) + WPSConstants.Biller.
\f2\i \cf6 SUFFIX_BILLER_DATA_UPDATED_AT
\f1\i0 \cf2 , LocalDateTime.
\f2\i now
\f1\i0 ());\
\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .getBulk(
\f2\i anyList
\f1\i0 ())).thenReturn(cachedata);\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillersInfoByBillerId(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 false\cf2 ))).thenReturn(\cf5 null\cf2 );\
        Map<String, Object> result = \cf6 billerCoreService\cf2 .fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);\
\
        
\f2\i assertNotNull
\f1\i0 (result);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_ReloadIncorrectSearchDataInCache\cf2 () \{\
        
\f2\i assertThrows
\f1\i0 (RuntimeException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .reloadIncorrectSearchDataInCache();\
        \});\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandlesFailuresInCacheOperationsException\cf2 () \{\
        Set<UUID> billerIds = \cf5 new \cf2 HashSet<>();\
        Set<String> processorBillerIds = \cf5 new \cf2 HashSet<>();\
        processorBillerIds.add(\cf8 "123"\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillersInfoByProcessorBillerIds(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 true\cf2 ))).thenThrow(\cf5 new \cf2 RuntimeException());\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .reloadCacheForBillerData(\cf6 processorBillerIds\cf2 , \cf6 billerIds\cf2 );\
        \});\
    \}\
\
\cf10 //    @Test\
//    void shouldTest_HandlesEmptySetOfProcessorBillerIdsGracefully() \{\
//        Set<UUID> billerIds = null;\
//        Set<String> processorBillerIds = null;\
//        Map<String, Set<String>> retryProcessorBillerIds = billerCoreService.reloadCacheForBillerData(processorBillerIds, billerIds);\
//\
//        assertTrue(retryProcessorBillerIds.isEmpty());\
//    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_ReloadCacheForBillerDataHandlesExceptions\cf2 () \{\
        Set<UUID> billerIds = \cf5 new \cf2 HashSet<>(Arrays.
\f2\i asList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 ()));\
        Set<String> processorBillerIds = \cf5 new \cf2 HashSet<>(Arrays.
\f2\i asList
\f1\i0 (\cf8 "1"\cf2 , \cf8 "2"\cf2 , \cf8 "3"\cf2 ));\
\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillersInfoByBillerId(
\f2\i anyList
\f1\i0 (), 
\f2\i eq
\f1\i0 (\cf5 true\cf2 ))).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Database connection error"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .reloadCacheForBillerData(\cf6 processorBillerIds\cf2 , \cf6 billerIds\cf2 );\
        \});\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerDataSuccess\cf2 () \{\
        Set<UUID> billerIds = \cf5 new \cf2 HashSet<>(Arrays.
\f2\i asList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 (), UUID.
\f2\i randomUUID
\f1\i0 ()));\
        Set<String> processorBillerIds = \cf5 new \cf2 HashSet<>(Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 ));\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .delete(
\f2\i anyString
\f1\i0 ())).thenReturn(
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 ));\
\
        \cf6 billerCoreService\cf2 .reloadCacheForBillerData(processorBillerIds, billerIds);\
\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).delete(\cf8 "123_WPS_BILLER_DATA"\cf2 );\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleUnexpectedExceptionsDuringDatabaseFetch\cf2 () \{\
        BusinessValidationException expectedException = 
\f2\i assertThrows
\f1\i0 (BusinessValidationException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .getPopularBillers();\
        \});\
\
        
\f2\i assertEquals
\f1\i0 (ErrorConstants.GetPopularBillers.
\f2\i \cf6 NO_POPULAR_BILLERS_FOUND
\f1\i0 \cf2 , expectedException.getErrorCode());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionInGetProcessorBillerIds\cf2 () \{\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getPopularBillersAndSubBillers()).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Simulated DB Exception"\cf2 ));\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .getPopularBillers();\
        \});\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchProcessorBillerIdsWhenDataIsPresentInCache\cf2 () \{\
        List<String> BillerIds = List.
\f2\i of
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillerIdsAndProcessorBillerIdsOfBillersWhoseDataIsCached()).thenReturn(\cf5 new \cf2 ArrayList<>());\
        List<Tuple> result = \cf6 billerCoreService\cf2 .getBillerIdsAndProcessorBillerIdsOfBillersWhoseDataIsCached();\
\
        
\f2\i assertNotEquals
\f1\i0 (BillerIds, result);\
        
\f2\i assertNotNull
\f1\i0 (result);\
        
\f2\i assertTrue
\f1\i0 (result.isEmpty());\
\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionInGetProcessorBillerIds_BillersWhoseDataIsCached\cf2 () \{\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .getBillerIdsAndProcessorBillerIdsOfBillersWhoseDataIsCached()).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Simulated DB Exception"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .getBillerIdsAndProcessorBillerIdsOfBillersWhoseDataIsCached();\
        \});\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_EvictCacheForBillerAndUpdateTimestampData\cf2 () \{\
        List<UUID> billerIdsToEvict = Arrays.
\f2\i asList
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 (), UUID.
\f2\i randomUUID
\f1\i0 ());\
        List<String> processorBillerIdsToEvict = Arrays.
\f2\i asList
\f1\i0 (\cf8 "123"\cf2 , \cf8 "456"\cf2 );\
        Set<String> expectedRetryProcessorBillerIds = \cf5 new \cf2 HashSet<>();\
        expectedRetryProcessorBillerIds.add(\cf8 "123"\cf2 );\
        expectedRetryProcessorBillerIds.add(\cf8 "456"\cf2 );\
\
        OperationFuture operationFuture = 
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 );\
        
\f2\i when
\f1\i0 (operationFuture.getStatus()).thenReturn(\cf5 new \cf2 OperationStatus(\cf5 true\cf2 , \cf8 "true"\cf2 ));\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .delete(
\f2\i anyString
\f1\i0 ())).thenReturn(operationFuture);\
\
        Map<String, Set<String>> retryProcessorBillerIds = \cf6 billerCoreService\cf2 .evictCacheForBillerAndUpdateTimestampData(billerIdsToEvict, processorBillerIdsToEvict);\
\
        
\f2\i assertNotEquals
\f1\i0 (expectedRetryProcessorBillerIds, retryProcessorBillerIds);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_CacheHitsReturnsCorrectData\cf2 () \{\
        String cacheKey = WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORDS_MAP_CACHE_KEY
\f1\i0 \cf2 ;\
        Map<String, List<String>> expectedMap = \cf5 new \cf2 HashMap<>();\
        expectedMap.put(\cf8 "keyword"\cf2 , List.
\f2\i of
\f1\i0 (\cf8 "biller1"\cf2 , \cf8 "biller2"\cf2 ));\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(cacheKey)).thenReturn(expectedMap);\
        Map<String, List<String>> result = \cf6 billerCoreService\cf2 .fetchBillerIncorrectSearchKeywordMap();\
\
        
\f2\i assertEquals
\f1\i0 (expectedMap, result);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_FetchBillerIncorrectSearchKeywordMapLogsError\cf2 () \{\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(
\f2\i anyString
\f1\i0 ())).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "error"\cf2 ));\
        
\f2\i assertDoesNotThrow
\f1\i0 (() -> \cf6 billerCoreService\cf2 .fetchBillerIncorrectSearchKeywordMap());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_RepositoryThrowsExceptionFetchingBillerSearchData\cf2 () \{\
        
\f2\i when
\f1\i0 (\cf6 billerSearchRepository\cf2 .getAllEnabledBillerSearchDO()).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "Error fetching data from DB"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (ProcessingException.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchAndCacheBillerIncorrectSearchKeywordMap();\
        \});\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_CachesMappedBillerIncorrectSearchKeywords\cf2 () \{\
        HashMap<String, List<String>> map = \cf5 new \cf2 HashMap<>();\
        map.put(\cf8 "Incorrect"\cf2 , \cf5 new \cf2 ArrayList<>());\
        OperationFuture<Boolean> future = 
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .set(
\f2\i anyString
\f1\i0 (), 
\f2\i anyInt
\f1\i0 (), 
\f2\i any
\f1\i0 ())).thenReturn(future);\
        \cf6 billerCoreService\cf2 .fetchAndCacheBillerIncorrectSearchKeywordMap();\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).set(
\f2\i anyString
\f1\i0 (), 
\f2\i anyInt
\f1\i0 (), 
\f2\i any
\f1\i0 ());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_wmclientFailsToCacheMappedData\cf2 () \{\
        List<BillerSearchDO> billerSearchKeywords = \cf5 new \cf2 ArrayList<>();\
        BillerSearchDO billerSearchDO = \cf5 new \cf2 BillerSearchDO();\
        billerSearchDO.setIncorrectKeyword(\cf8 "Incorrect_keyword"\cf2 );\
        List<BillerDO> billers = \cf5 new \cf2 ArrayList<>();\
        BillerDO billerDO = MockUtils.
\f2\i getBillerDO
\f1\i0 ();\
        billers.add(billerDO);\
        billerSearchDO.setBillers(billers);\
        billerSearchKeywords.add(billerSearchDO);\
\
        
\f2\i when
\f1\i0 (\cf6 billerSearchRepository\cf2 .getAllEnabledBillerSearchDO()).thenReturn(billerSearchKeywords);\
\
        OperationFuture<Boolean> operationFuture = 
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .set(
\f2\i anyString
\f1\i0 (), 
\f2\i anyInt
\f1\i0 (), 
\f2\i any
\f1\i0 ())).thenReturn(operationFuture);\
\
        Map<String, List<String>> result = \cf6 billerCoreService\cf2 .fetchAndCacheBillerIncorrectSearchKeywordMap();\
\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 , 
\f2\i times
\f1\i0 (\cf9 1\cf2 )).set(
\f2\i eq
\f1\i0 (WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORDS_MAP_CACHE_KEY
\f1\i0 \cf2 ), 
\f2\i eq
\f1\i0 (\cf9 0\cf2 ), 
\f2\i any
\f1\i0 ());\
\
        
\f2\i assertNotNull
\f1\i0 (result);\
        
\f2\i assertEquals
\f1\i0 (\cf9 1\cf2 , result.size());\
        
\f2\i assertTrue
\f1\i0 (result.containsKey(\cf8 "Incorrect_keyword"\cf2 ));\
        
\f2\i assertEquals
\f1\i0 (\cf9 1\cf2 , result.get(\cf8 "Incorrect_keyword"\cf2 ).size());\
        
\f2\i assertEquals
\f1\i0 (\cf8 "CFE"\cf2 , result.get(\cf8 "Incorrect_keyword"\cf2 ).get(\cf9 0\cf2 ));\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_LogsSuccessfulCacheRetrieval\cf2 () \{\
        Date expectedDate = \cf5 new \cf2 Date();\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORD_MAP_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 )).thenReturn(expectedDate);\
\
        \cf6 billerCoreService\cf2 .fetchBillerIncorrectSearchDataUpdateTimestamp();\
        Date actualDate = \cf6 billerCoreService\cf2 .fetchBillerIncorrectSearchDataUpdateTimestamp();\
\
        
\f2\i assertEquals
\f1\i0 (expectedDate, actualDate);\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_CacheKeyMissing_or_Incorrect\cf2 () \{\
        Date expected = \cf5 new \cf2 Date();\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORD_MAP_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 )).thenReturn(\cf5 null\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 billerSearchRepository\cf2 .getBillerIncorrectSearchDataUpdateTimestamp()).thenReturn(expected);\
        OperationFuture<Boolean> operationFuture = 
\f2\i mock
\f1\i0 (OperationFuture.\cf5 class\cf2 );\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .set(WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORD_MAP_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 , \cf9 0\cf2 , expected)).thenReturn(operationFuture);\
\
        Date result = \cf6 billerCoreService\cf2 .fetchBillerIncorrectSearchDataUpdateTimestamp();\
\
        
\f2\i assertEquals
\f1\i0 (expected, result);\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 ).get(WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORD_MAP_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 );\
        
\f2\i verify
\f1\i0 (\cf6 billerSearchRepository\cf2 ).getBillerIncorrectSearchDataUpdateTimestamp();\
        
\f2\i verify
\f1\i0 (\cf6 wmClient\cf2 ).set(WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORD_MAP_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 , \cf9 0\cf2 , expected);\
        
\f2\i verify
\f1\i0 (operationFuture).addListener(
\f2\i any
\f1\i0 ());\
    \}\
\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_CacheUpdateThrowsException\cf2 () \{\
        Date expecctedDate = \cf5 new \cf2 Date();\
\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .get(WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORD_MAP_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 )).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "simulated exception"\cf2 ));\
\
        
\f2\i when
\f1\i0 (\cf6 billerSearchRepository\cf2 .getBillerIncorrectSearchDataUpdateTimestamp()).thenReturn(expecctedDate);\
        
\f2\i when
\f1\i0 (\cf6 wmClient\cf2 .set(
\f2\i eq
\f1\i0 (WPSConstants.Biller.
\f2\i \cf6 BILLER_INCORRECT_SEARCH_KEYWORD_MAP_UPDATED_AT_CACHE_KEY
\f1\i0 \cf2 ), 
\f2\i anyInt
\f1\i0 (), 
\f2\i eq
\f1\i0 (expecctedDate))).thenThrow(\cf5 new \cf2 RuntimeException(\cf8 "simulated exception"\cf2 ));\
\
        
\f2\i assertThrows
\f1\i0 (Exception.\cf5 class\cf2 , () -> \{\
            \cf6 billerCoreService\cf2 .fetchBillerIncorrectSearchDataUpdateTimestamp();\
        \});\
    \}\
    \cf10 //*****\
//    @Test\
//    void shouldTest_HandleExceptionInUpdateBehaviourCodeForAllBillers() \{\
//        List<BillerDO> billerDOS = new ArrayList<>();\
//        when(billerRepository.findAll()).thenThrow(new RuntimeException("Error fetching all billers"));\
//\
//        Exception exception = assertThrows(RuntimeException.class, () -> billerCoreService.updateBehaviourCodeForAllBillersAndCreateBillerIdToBBCMap());\
//\
//        assertNotNull(exception);\
//        assertEquals("Error fetching all billers", exception.getMessage());\
//    \}\
//    @Test\
//    void test99() \{\
//        List<BillerDO> billerDOS = Arrays.asList(new BillerDO(), new BillerDO());\
//        when(billerRepository.findAll()).thenReturn(billerDOS);\
//        Map<String, String> result = billerCoreService.updateBehaviourCodeForAllBillersAndCreateBillerIdToBBCMap();\
//        assertNotNull(result);\
//        verify(billerRepository, times(1)).saveAll(billerDOS);\
//    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandleExceptionDuringFetchingBillers\cf2 () \{\
        List<BillerDO> billerDOS = List.
\f2\i of
\f1\i0 (\cf5 new \cf2 BillerDO());\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .findAll()).thenReturn(billerDOS);\
        
\f2\i assertThrows
\f1\i0 (RuntimeException.\cf5 class\cf2 , () -> \cf6 billerCoreService\cf2 .updateBehaviourCodeForAllBillersAndCreateBillerIdToBBCMap());\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_updateBehaviourCodeForAllBillersAndCreateBillerIdToBBCMap\cf2 () \{\
        List<BillerDO> billerDOS = \cf5 new \cf2 ArrayList<>();\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .findAll()).thenReturn(billerDOS);\
\
        Map<String, String> expectedMap = \cf5 new \cf2 HashMap<>();\
        \cf5 for \cf2 (BillerDO billerDO : billerDOS) \{\
            expectedMap.put(billerDO.getBillerId().toString(), billerDO.getBillerBehaviourCode());\
        \}\
        Map<String, String> result = \cf6 billerCoreService\cf2 .updateBehaviourCodeForAllBillersAndCreateBillerIdToBBCMap();\
        
\f2\i assertEquals
\f1\i0 (expectedMap, result);\
\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_HandlesValidSetOfBillerIdsWithoutExceptions\cf2 () \{\
        Set<UUID> billerIds = Set.
\f2\i of
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 ());\
        List<BillerDO> billerDOS = List.
\f2\i of
\f1\i0 (\cf5 new \cf2 BillerDO());\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .findAllById(billerIds)).thenReturn(billerDOS);\
\
        
\f2\i assertThrows
\f1\i0 (RuntimeException.\cf5 class\cf2 , () -> \cf6 billerCoreService\cf2 .updateBehaviourCodeForGivenBillerIdsAndCreateBillerIdToBBCMap(\cf6 billerIds\cf2 ));\
    \}\
    \cf4 @Test\
    \cf5 void \cf7 shouldTest_updateBehaviourCodeForAllBillersAndCreateBillerIdToBBCMap_2\cf2 () \{\
        List<BillerDO> billerDOS = \cf5 new \cf2 ArrayList<>();\
        Set<UUID> billerIds = Set.
\f2\i of
\f1\i0 (UUID.
\f2\i randomUUID
\f1\i0 ());\
        
\f2\i when
\f1\i0 (\cf6 billerRepository\cf2 .findAllById(billerIds)).thenReturn(billerDOS);\
\
        Map<String, String> expectedMap = \cf5 new \cf2 HashMap<>();\
        \cf5 for \cf2 (BillerDO billerDO : billerDOS) \{\
            expectedMap.put(billerDO.getBillerId().toString(), billerDO.getBillerBehaviourCode());\
        \}\
        Map<String, String> result = \cf6 billerCoreService\cf2 .updateBehaviourCodeForGivenBillerIdsAndCreateBillerIdToBBCMap(billerIds);\
        
\f2\i assertEquals
\f1\i0 (expectedMap, result);\
\
    \}\
\}\
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\
\
package com.walmart.subscription.ca.cronjobs.integrationTest;\
\
import com.walmart.subscription.ca.domain.aspect.exceptions.BuyNowException;\
import com.walmart.subscription.ca.domain.common.config.CXOConfig;\
import com.walmart.subscription.ca.domain.common.constants.CaSubscriptionConstants;\
import com.walmart.subscription.ca.domain.common.constants.UserSubCustomAttrConstants;\
\
import static org.junit.jupiter.api.Assertions.assertEquals;\
import static org.junit.jupiter.api.Assertions.assertNotNull;\
import static org.junit.jupiter.api.Assertions.assertNull;\
import static org.junit.jupiter.api.Assertions.assertTrue;\
import static org.mockito.ArgumentMatchers.any;\
import static org.mockito.Mockito.doReturn;\
import static org.mockito.Mockito.mock;\
import static org.mockito.Mockito.when;\
\
import com.walmart.kafka.producer.KafkaDRProducer;\
import com.walmart.subscription.ca.cronjobs.service.impl.RenewalJobServiceImpl;\
import com.walmart.subscription.ca.domain.adapter.caspr.CasprServiceAdapter;\
import com.walmart.subscription.ca.domain.adapter.cxo.CXOServiceAdapter;\
import com.walmart.subscription.ca.domain.adapter.geolocation.GeoLocationServiceAdapter;\
import com.walmart.subscription.ca.domain.common.config.WalmartPassConfig;\
import com.walmart.subscription.ca.domain.common.exception.CaSubscriptionErrorCodes;\
import com.walmart.subscription.ca.domain.enums.OrderStatus;\
import com.walmart.subscription.ca.domain.handler.impl.WPCommsMessageEventHandlerImpl;\
import com.walmart.subscription.ca.domain.model.GeoLocationResponse;\
import com.walmart.subscription.ca.domain.model.caspr.AccessPoint;\
import com.walmart.subscription.ca.domain.model.caspr.CasprEligibilityResponse;\
import com.walmart.subscription.ca.domain.model.caspr.CasprEligibiltyReq;\
import com.walmart.subscription.ca.domain.model.cxo.request.BuyNowRequest;\
import com.walmart.subscription.ca.domain.model.cxo.response.BuyNowResponse;\
import com.walmart.subscription.ca.domain.model.query.RenewalJobConfig;\
import com.walmart.subscription.ca.domain.persistence.impl.RenewalSubscriptionRepoExtension;\
import com.walmart.subscription.ca.domain.publisher.service.SubscriptionEventKafkaPublisher;\
import com.walmart.subscription.ca.domain.service.WPSubscriptionBatchService;\
import com.walmart.subscription.ca.domain.service.WalmartPassQueryService;\
import com.walmart.subscription.common.constants.Const;\
import com.walmart.subscription.common.enums.BatchStatus;\
import com.walmart.subscription.common.enums.SubscriptionStatus;\
import com.walmart.subscription.common.enums.SubscriptionTenant;\
import com.walmart.subscription.common.exception.SubscriptionErrorCodes;\
import com.walmart.subscription.common.exception.SubscriptionException;\
import com.walmart.subscription.common.util.JsonConvertorUtil;\
import com.walmart.subscription.domain.aggregate.SubscriptionPurchaseAggregate;\
import com.walmart.subscription.domain.entities.ExpirySubscription;\
import com.walmart.subscription.domain.entities.RenewalSubscription;\
import com.walmart.subscription.domain.entities.SubscriptionPlan;\
import com.walmart.subscription.domain.entities.UserSubscription;\
import com.walmart.subscription.domain.entities.UserSubscriptionHistory;\
import com.walmart.subscription.domain.model.payment.PaymentStatus;\
import com.walmart.subscription.domain.model.usersubscription.PaymentDetail;\
import com.walmart.subscription.domain.model.usersubscription.UserRenewalConfig;\
import com.walmart.subscription.domain.persistence.ExpirySubscriptionRepository;\
import com.walmart.subscription.domain.persistence.RenewalSubscriptionRepository;\
import com.walmart.subscription.domain.persistence.SubscriptionPlanRepository;\
import com.walmart.subscription.domain.persistence.UserSubscriptionHistoryRepository;\
import com.walmart.subscription.domain.persistence.UserSubscriptionRepository;\
import com.walmart.subscription.domain.singleprofile.model.UserFullProfile;\
import com.walmart.subscription.infra.singleprofile.services.GetProfileDetailsService;\
import java.nio.file.Files;\
import java.nio.file.Paths;\
import java.time.LocalDate;\
import java.time.LocalDateTime;\
import java.time.format.DateTimeFormatter;\
import java.util.ArrayList;\
import java.util.Arrays;\
import java.util.Collections;\
import java.util.HashMap;\
import java.util.Hashtable;\
import java.util.List;\
import java.util.Map;\
import java.util.Objects;\
import java.util.UUID;\
import java.util.concurrent.CompletableFuture;\
import org.checkerframework.checker.units.qual.C;\
import org.junit.jupiter.api.BeforeEach;\
import org.junit.jupiter.api.Test;\
import org.junit.jupiter.api.extension.ExtendWith;\
import org.mockito.Mock;\
import org.mockito.junit.jupiter.MockitoExtension;\
import org.springframework.beans.factory.annotation.Autowired;\
import org.springframework.boot.test.context.SpringBootTest;\
import org.springframework.boot.test.mock.mockito.MockBean;\
import org.springframework.test.context.ActiveProfiles;\
import reactor.core.publisher.Flux;\
import reactor.core.publisher.Mono;\
\
@ActiveProfiles("test")\
@SpringBootTest\
@ExtendWith(MockitoExtension.class)\
public class RenewalPurchaseIT \{\
\
  private static final String INTEGRATION_TEST_FLOW = "IntegrationTestFlow";\
\
  private static final String CLIENT_ERROR = "clientError";\
\
  private static final String SERVER_ERROR = "serverError";\
\
\
  static \{\
    System.setProperty(INTEGRATION_TEST_FLOW, String.valueOf(true));\
  \}\
\
\
  @MockBean\
  RenewalSubscriptionRepoExtension renewalSubscriptionRepoExtension;\
\
  @MockBean\
  RenewalSubscriptionRepository renewalSubscriptionRepository;\
\
  @MockBean\
  WalmartPassQueryService walmartPassQueryService;\
\
  @MockBean\
  CasprServiceAdapter casprServiceAdapter;\
\
  @MockBean\
  UserSubscriptionRepository userSubscriptionRepository;\
\
  @MockBean\
  SubscriptionEventKafkaPublisher subscriptionEventKafkaPublisher;\
\
  @MockBean\
  UserSubscriptionHistoryRepository userSubscriptionHistoryRepository;\
\
  @MockBean\
  GetProfileDetailsService getProfileDetailsService;\
\
  @MockBean\
  GeoLocationServiceAdapter geoLocationServiceAdapter;\
\
  @MockBean\
  CXOServiceAdapter cxoServiceAdapter;\
\
  @MockBean\
  ExpirySubscriptionRepository expirySubscriptionRepository;\
\
  @MockBean\
  KafkaDRProducer subscriptionEventsProducer;\
\
  @MockBean\
  WalmartPassConfig walmartPassConfig;\
\
  @MockBean\
  SubscriptionPlanRepository subscriptionPlanRepository;\
\
  @MockBean\
  WPCommsMessageEventHandlerImpl commsMessageEventHandler;\
\
  @MockBean\
  CXOConfig cxoConfig;\
\
  @Autowired\
  WPSubscriptionBatchService wpSubscriptionBatchService;\
\
\
  private List<RenewalSubscription> renewalSubscriptionList;\
\
  private RenewalSubscription renewalSubscriptionScheduled;\
\
  private UserSubscription userSubscription;\
\
  private SubscriptionPlan subscriptionPlan;\
\
  private UserSubscription userSubscriptionDeactivated;\
\
  private UserSubscription userSubscriptionNew;\
\
  private ExpirySubscription expirySubscription;\
\
  private UserFullProfile userFullProfile;\
\
  private GeoLocationResponse geoLocationResponse;\
\
  private CasprEligibilityResponse casprEligibilityResponse;\
\
  private BuyNowResponse buyNowResponse;\
\
  private UserSubscription successEndUserSubscription;\
\
  private UserSubscription newUserSubscriptionDeactivated;\
\
\
  @Autowired\
  RenewalJobServiceImpl renewalJobServiceImpl;\
\
  @BeforeEach\
  public void setup() throws Exception \{\
\
    System.setProperty(INTEGRATION_TEST_FLOW, String.valueOf(false));\
\
    renewalSubscriptionList = getRenewalData();\
\
    renewalSubscriptionScheduled = getRenewalSubscriptionScheduled();\
\
    userSubscription = getUserSubscription();\
\
    subscriptionPlan = getSubscriptionPlan();\
\
    userSubscriptionDeactivated = getUserSubscriptionDeactivated(userSubscription);\
\
    userSubscriptionNew = getuserSubscriptionNew(userSubscription);\
\
    expirySubscription = getExpirySubscription(userSubscription);\
\
    userFullProfile = getSPSResponse();\
\
    geoLocationResponse = getGeoLocationResponse();\
\
    casprEligibilityResponse = getcasprEligibilityResponse();\
\
    buyNowResponse = getBuyNowResponse();\
\
    successEndUserSubscription = getEndUserActivatedAndOrderPlaced();\
\
\
    newUserSubscriptionDeactivated = getUserNewSubscriptionDeactivated();\
\
    when(commsMessageEventHandler.handleCommsEventMessage(any())).thenReturn(Mono.just(Boolean.TRUE));\
\
    when(subscriptionPlanRepository.get(any())).thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(mock(UserSubscriptionHistory.class)));\
\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(mock(UserSubscription.class)));\
    when(renewalSubscriptionRepository.fetchAllRenewalSubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(getRandomDummyRenewalSubscription(renewalSubscriptionList.get(0))));\
\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
  \}\
\
  @Test\
  public void renewalSuccessFirstTry() throws Exception \{\
\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew))\
        .thenReturn(CompletableFuture.completedFuture(successEndUserSubscription));\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #5\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 14.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //15.mock cxoService call\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.completedFuture(buyNowResponse));\
\
    //16.mock update User Subscription - DB call - through\
\
\
    // 17.mock History Event DB create\
    UserSubscriptionHistory userSubscriptionHistoryMock = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistoryMock));\
\
\
    SubscriptionPurchaseAggregate mockResponse =\
        renewalJobServiceImpl.renewal(buildRenewalConfig()).blockFirst();\
\
    userSubscriptionNew = successEndUserSubscription;\
\
    assertNotNull(mockResponse);\
    assertNotNull(mockResponse.getSubscriptionPlan());\
    assertNotNull(mockResponse.getUserSubscription());\
    assertEquals(userSubscription.getUserId(), mockResponse.getUserSubscription().getUserId());\
    assertEquals(userSubscriptionNew.getSubscriptionId(), mockResponse.getUserSubscription().getSubscriptionId());\
    assertEquals(userSubscription.getUserRenewalConfig().getPlanId(), mockResponse.getSubscriptionPlan().getPlanId());\
    assertEquals(userSubscription.getUserRenewalConfig().getRenewalDate().get(),\
        mockResponse.getUserSubscription().getTermStartDate());\
    assertEquals(mockResponse.getUserSubscription().getSubscriptionStatus(), SubscriptionStatus.ACTIVE);\
    assertEquals(mockResponse.getUserSubscription().getTermStartDate(), LocalDate.now());\
    assertEquals(mockResponse.getUserSubscription().getPaymentDetails().get().getCardId(),\
        userSubscription.getPaymentDetails().get().getCardId());\
    assertEquals(mockResponse.getUserSubscription().getUserRenewalConfig().getRenewalDate().get(),\
        LocalDate.now().plusDays(31));\
\
  \}\
\
  @Test\
  public void renewalSuccessNotFirstTry() throws Exception \{\
\
\
    // 1. Mock Renewal Table DB call\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.just(renewalSubscriptionScheduled);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    // 2. Mock Renewal Table DB call to schedule\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionScheduled));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew));\
\
\
    // 4. Mock User Subscription DB call to update Existing User\
    Map<String, String> customAttributesUpdated = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, Integer.toString(\
        (Integer.parseInt(\
            userSubscriptionNew.getCustomAttributes().get(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT)) + 1))\
    );\
    UserSubscription userSubscriptionUpdated = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesUpdated)\
        .build();\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionUpdated))\
        .thenReturn(CompletableFuture.completedFuture(successEndUserSubscription));\
\
    //5. Mock WalmartPass Config Call for max retry;\
\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    // 6. Mock Subscription Plan DB call For new Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 7. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 8.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 9.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //10.mock cxoService call\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.completedFuture(buyNowResponse));\
\
    //11.mock update User Subscription - DB call -through #4\
\
\
    // 12.mock History Event DB create\
    UserSubscriptionHistory userSubscriptionHistoryMock = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistoryMock));\
\
\
    SubscriptionPurchaseAggregate mockResponse =\
        renewalJobServiceImpl.renewal(buildRenewalConfig()).blockFirst();\
    userSubscriptionNew = successEndUserSubscription;\
    assertNotNull(mockResponse);\
    assertNotNull(mockResponse.getSubscriptionPlan());\
    assertNotNull(mockResponse.getUserSubscription());\
    assertEquals(userSubscriptionNew.getUserId(), mockResponse.getUserSubscription().getUserId());\
    assertEquals(userSubscriptionNew.getSubscriptionId(), mockResponse.getUserSubscription().getSubscriptionId());\
    assertEquals(userSubscriptionNew.getUserRenewalConfig().getPlanId(),\
        mockResponse.getSubscriptionPlan().getPlanId());\
    assertEquals(LocalDate.now(), mockResponse.getUserSubscription().getTermStartDate());\
    assertEquals(mockResponse.getUserSubscription().getSubscriptionStatus(), SubscriptionStatus.ACTIVE);\
    assertEquals(mockResponse.getUserSubscription().getTermStartDate(), LocalDate.now());\
    assertEquals(mockResponse.getUserSubscription().getPaymentDetails().get().getCardId(),\
        userSubscriptionNew.getPaymentDetails().get().getCardId());\
    assertEquals(mockResponse.getUserSubscription().getUserRenewalConfig().getRenewalDate().get(),\
        LocalDate.now().plusDays(31));\
\
\
  \}\
\
\
  @Test\
  public void RenewalFailureLastTry() throws Exception \{\
\
    RenewalSubscription renewalSubscription = RenewalSubscription\
        .builder()\
        .tenantId(SubscriptionTenant.CANADA)\
        .renewalDate(LocalDate.now().minusDays(7))\
        .userId("4c8ab353-bd43-499a-84f5-40f33bea4497")\
        .subscriptionId(userSubscription.getSubscriptionId())\
        .planId("910000010030")\
        .batchStatus(BatchStatus.SCHEDULED)\
        .etag(UUID.randomUUID().toString())\
        .build();\
\
    // 3. Mock User Subscription DB Call for specific User\
    Map<String, String> customAttributesNew = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesNew.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, "7");\
    userSubscriptionNew = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesNew)\
        .build();\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 4. Mock Subscription Plan DB call For new Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    //5 Mock WalmartConfig Call\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    //6. Mock Renewal Table DB call to fetch\
\
    when(renewalSubscriptionRepository.fetchAllRenewalSubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(getRandomDummyRenewalSubscription(renewalSubscription)));\
\
    // 7. Mock Renewal Table to Update\
    RenewalSubscription renewalSubscriptionUpdated = RenewalSubscription\
        .builder()\
        .tenantId(SubscriptionTenant.CANADA)\
        .renewalDate(LocalDate.now().minusDays(7))\
        .userId("4c8ab353-bd43-499a-84f5-40f33bea4497")\
        .subscriptionId(userSubscription.getSubscriptionId())\
        .planId("910000010030")\
        .batchStatus(BatchStatus.INVALID)\
        .etag(UUID.randomUUID().toString())\
        .build();\
    when(renewalSubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(renewalSubscriptionUpdated));\
\
    //8. Mock Create Histoty Event\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    //9 Mock Publish on Kafka\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any()))\
        .thenReturn(Mono.just(object));\
\
\
    // 10.Mock User Subscription Update\
\
    HashMap<String, String> customAttributesUpdated = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_FAILURE_REASON, "Failure Reason");\
    UserSubscription userSubscriptionUpdated = UserSubscription\
        .builder(userSubscriptionNew)\
        .paymentDetail(PaymentDetail\
            .builder(userSubscriptionNew.getPaymentDetails().get())\
            .paymentStatus(PaymentStatus.FAILED)\
            .build())\
        .customAttributes(customAttributesUpdated)\
        .subscriptionStatus(SubscriptionStatus.INACTIVE)\
        .build();\
\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionUpdated));\
\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.SUBSCRIPTION_NOT_ELIGIBLE_FOR_RENEWAL;\
    executeAndVerify(renewalSubscription, (CaSubscriptionErrorCodes) error, CLIENT_ERROR);\
\
  \}\
\
  @Test\
  public void CARD_EXPIRED_RetryExhausted() throws Exception \{\
\
\
    Map<String, String> customAttributesLastRetry = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesLastRetry.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, "7");\
\
    userSubscriptionNew = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesLastRetry)\
        .build();\
\
    userFullProfile.getCards().get(0).setExpired(true);\
\
    // 1. Mock Renewal Table DB call\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.just(renewalSubscriptionScheduled);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    // 2. Mock Renewal Table DB call to schedule\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionScheduled));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew));\
\
\
    // 4. Mock User Subscription DB call to update Existing User\
    Map<String, String> customAttributesUpdated = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, Integer.toString(\
        (Integer.parseInt(\
            userSubscriptionNew.getCustomAttributes().get(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT)) + 1))\
    );\
    UserSubscription userSubscriptionUpdated = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesUpdated)\
        .build();\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionUpdated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated));\
\
    //5. Mock WalmartPass Config Call for max retry;\
\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    // 6. Mock Subscription Plan DB call For new Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 7. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 8.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 9.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //10.mock cxoService call\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.completedFuture(buyNowResponse));\
\
    //11.mock update User Subscription - DB call -through #4\
\
\
    // 12.mock History Event DB create\
    UserSubscriptionHistory userSubscriptionHistoryMock = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistoryMock));\
\
    when(renewalSubscriptionRepository.fetchAllRenewalSubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(getRandomDummyRenewalSubscription(renewalSubscriptionScheduled)));\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.CARD_EXPIRED;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
  \}\
\
  @Test\
  public void CHANGE_CARD_REQUESTED_AndRenewalRetryExhausted() throws Exception \{\
\
    RenewalSubscription renewalSubscription = RenewalSubscription\
        .builder()\
        .tenantId(SubscriptionTenant.CANADA)\
        .renewalDate(LocalDate.now())\
        .userId("4c8ab353-bd43-499a-84f5-40f33bea4497")\
        .subscriptionId(UUID.randomUUID().toString())\
        .planId("910000010030")\
        .batchStatus(BatchStatus.SCHEDULED)\
        .etag(UUID.randomUUID().toString())\
        .build();\
    // 1. Mock Renewal Table DB call\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.just(renewalSubscription);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    // 2. Mock Renewal Table DB call to schedule\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscription));\
\
    // 3. Mock User Subscription DB Call for specific User\
    Map<String, String> customAttributesCardChangeRequested = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesCardChangeRequested.put(UserSubCustomAttrConstants.CHANGE_CARD_REQUESTED, "yes");\
    customAttributesCardChangeRequested.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, "7");\
    userSubscriptionNew = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesCardChangeRequested)\
        .build();\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew));\
\
    //4. subscription table db call\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
\
    // 4. Mock User Subscription DB call to update Existing User\
    Map<String, String> customAttributesUpdated = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, Integer.toString(\
        (Integer.parseInt(\
            userSubscriptionNew.getCustomAttributes().get(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT)) + 1))\
    );\
    UserSubscription userSubscriptionUpdated = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesUpdated)\
        .build();\
\
    Map<String, String> customAttributesDeactivated = new HashMap<>(userSubscriptionUpdated.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_FAILURE_REASON, "Failure Reason");\
    UserSubscription userSubscriptionDeactivatedRetryExhausted = UserSubscription\
        .builder(userSubscriptionUpdated)\
        .paymentDetail(PaymentDetail\
            .builder(userSubscriptionUpdated.getPaymentDetails().get())\
            .paymentStatus(PaymentStatus.FAILED)\
            .build())\
        .customAttributes(customAttributesDeactivated)\
        .subscriptionStatus(SubscriptionStatus.INACTIVE)\
        .build();\
\
    doReturn(CompletableFuture.completedFuture(userSubscriptionUpdated),\
        CompletableFuture.completedFuture(userSubscriptionDeactivatedRetryExhausted))\
        .when(userSubscriptionRepository).updateSubscription(any());\
\
\
    //5. Mock WalmartPassConfig for max retry count\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    //6. Mock Renewal Table DB call to fetch\
\
    when(renewalSubscriptionRepository.fetchAllRenewalSubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(getRandomDummyRenewalSubscription(renewalSubscription)));\
\
    // 7. Mock Renewal Table to Update\
    RenewalSubscription renewalSubscriptionUpdated = RenewalSubscription\
        .builder()\
        .tenantId(SubscriptionTenant.CANADA)\
        .renewalDate(LocalDate.now().minusDays(7))\
        .userId("4c8ab353-bd43-499a-84f5-40f33bea4497")\
        .subscriptionId(userSubscription.getSubscriptionId())\
        .planId("910000010030")\
        .batchStatus(BatchStatus.INVALID)\
        .etag(UUID.randomUUID().toString())\
        .build();\
    when(renewalSubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(renewalSubscriptionUpdated));\
\
    //8. Mock Create Histoty Event\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    //9 Mock Publish on Kafka\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any()))\
        .thenReturn(Mono.just(object));\
\
    // 10 Update UserSubscription - through 4\
\
\
    SubscriptionPurchaseAggregate mockResponse =\
        renewalJobServiceImpl.renewal(buildRenewalConfig()).blockFirst();\
\
    assertNotNull(mockResponse);\
    assertNull(mockResponse.getUserSubscription());\
    assertNull(mockResponse.getSubscriptionPlan());\
  \}\
\
  @Test\
  public void renewalFailure_SUBSCRIPTION_NOT_ELIGIBLE_FOR_RENEWAL() throws Exception \{\
    UserRenewalConfig userRenewalConfig = UserRenewalConfig.withRenewalConfigurationForRenewDisabled();\
\
    userSubscriptionDeactivated = UserSubscription\
        .builder(userSubscriptionDeactivated)\
        .userRenewalConfig(userRenewalConfig)\
        .build();\
\
    // 1. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 2. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 3. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated));\
\
    // 4. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 5. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 6. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 7. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
//    // 8. Mock Create new User DB call\
//\
//    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
//        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.SUBSCRIPTION_NOT_ELIGIBLE_FOR_RENEWAL;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
  \}\
\
  @Test\
  public void renewalFailure_SUBSCRIPTION_ORDER_PLACED_OrderPlaced() throws Exception \{\
\
\
    // 1. Mock Renewal Table DB call\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.just(renewalSubscriptionScheduled);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    // 2. Mock Renewal Table DB call to schedule\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionScheduled));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    Map<String, String> customAttributesOrderPlaced = new Hashtable<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesOrderPlaced.put(UserSubCustomAttrConstants.ORDER_STATUS, OrderStatus.ORDER_PLACED.name());\
    userSubscriptionNew = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesOrderPlaced)\
        .build();\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew));\
\
\
    // 4. Mock User Subscription DB call to update Existing User\
    Map<String, String> customAttributesUpdated = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, Integer.toString(\
        (Integer.parseInt(\
            userSubscriptionNew.getCustomAttributes().get(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT)) + 1))\
    );\
    UserSubscription userSubscriptionUpdated = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesUpdated)\
        .build();\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionUpdated));\
\
    //5. Mock WalmartPass Config Call for max retry;\
\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    // 6. Mock Subscription Plan DB call For new Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.SUBSCRIPTION_ORDER_PLACED;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
  \}\
\
\
  @Test\
  public void renewalFailure_SUBSCRIPTION_ORDER_PLACED_OrderSuccess() throws Exception \{\
\
\
    // 1. Mock Renewal Table DB call\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.just(renewalSubscriptionScheduled);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    // 2. Mock Renewal Table DB call to schedule\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionScheduled));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    Map<String, String> customAttributesOrderPlaced = new Hashtable<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesOrderPlaced.put(UserSubCustomAttrConstants.ORDER_STATUS, OrderStatus.ORDER_SUCCESS.name());\
    userSubscriptionNew = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesOrderPlaced)\
        .build();\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew));\
\
\
    // 4. Mock User Subscription DB call to update Existing User\
    Map<String, String> customAttributesUpdated = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, Integer.toString(\
        (Integer.parseInt(\
            userSubscriptionNew.getCustomAttributes().get(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT)) + 1))\
    );\
    UserSubscription userSubscriptionUpdated = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesUpdated)\
        .build();\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionUpdated));\
\
    //5. Mock WalmartPass Config Call for max retry;\
\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    // 6. Mock Subscription Plan DB call For new Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.SUBSCRIPTION_ORDER_PLACED;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
  \}\
\
  @Test\
  public void renewalFailure_INVALID_SINGLE_PROFILE_USER_ID() throws Exception \{\
\
    UserFullProfile userFullProfile = mock(UserFullProfile.class);\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated));\
\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    when(userFullProfile.getStatus()).thenReturn(Const.SINGLE_PROFILE_ERROR_STATUS);\
\
\
    SubscriptionErrorCodes error = SubscriptionErrorCodes.INVALID_SINGLE_PROFILE_USER_ID;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
\
  \}\
\
  @Test\
  public void renewalFailure_CARD_ID_NOT_PRESENT_IN_USER_PROFILE() throws Exception \{\
\
    userSubscriptionNew = UserSubscription\
        .builder(userSubscriptionNew)\
        .paymentDetail(PaymentDetail\
            .builder(userSubscriptionNew.getPaymentDetails().get())\
            .cardId(UUID.randomUUID().toString())\
            .build())\
        .build();\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated));\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    when(renewalSubscriptionRepository.fetchAllRenewalSubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(getRandomDummyRenewalSubscription(renewalSubscriptionList.get(0))));\
\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.CARD_ID_NOT_PRESENT_IN_USER_PROFILE;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
\
  \}\
\
  @Test\
  public void renewalFailure_CARD_EXPIRED() throws Exception \{\
\
    userFullProfile.getCards().get(0).setExpired(true);\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated));\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.CARD_EXPIRED;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
\
  \}\
\
  @Test\
  public void renewalFailure_DELIVERY_ADDRESS_NOT_FOUND_IN_USER_PROFILE() throws Exception \{\
\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated))\
    ;\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    Map<String, String> customAttributesRandomAddressID = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesRandomAddressID.put("address_id", UUID.randomUUID().toString());\
    userSubscriptionNew = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesRandomAddressID)\
        .build();\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.DELIVERY_ADDRESS_NOT_FOUND_IN_USER_PROFILE;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
\
  \}\
\
  @Test\
  public void renewalFailure_GEO_LOCATION_RESPONSE_ERROR() throws Exception \{\
\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated));\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.error(new RuntimeException()));\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.GEO_LOCATION_RESPONSE_ERROR;\
    executeAndVerify(renewalSubscriptionList.get(0), error, SERVER_ERROR);\
\
  \}\
\
  @Test\
  public void renewalFailure_ADDRESS_IS_NOT_ELIGIBLE_FOR_DELIVERY() throws Exception \{\
\
\
    List<AccessPoint> accessPointList = new ArrayList<>();\
    casprEligibilityResponse.getPayload().setAccessPointList(accessPointList);\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated))\
    ;\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 14.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //<-------handle failure------>\
    when(subscriptionPlanRepository.get(any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    //History table through #8\
    // kafka call through #9\
\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    // Update User Subscription with Reason\
\
    //Email service\
    when(commsMessageEventHandler.handleCommsEventMessage(any())).thenReturn(Mono.just(Boolean.TRUE));\
\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.ADDRESS_IS_NOT_ELIGIBLE_FOR_DELIVERY;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
  \}\
\
  @Test\
  public void renewalFailure_CASPR_SERVICE_ELIGIBILITY_RESPONSE_ERROR() throws Exception \{\
\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated))\
    ;\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 14.mock casprService call\
    doReturn(Mono.error(new RuntimeException())).when(casprServiceAdapter)\
        .getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class));\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.CASPR_SERVICE_ELIGIBILITY_RESPONSE_ERROR;\
    executeAndVerify(renewalSubscriptionList.get(0), error, SERVER_ERROR);\
\
  \}\
\
  @Test\
  public void renewalFailure_ERROR_CALLING_BUY_NOW_StatusNotOk() throws Exception \{\
\
    buyNowResponse.setStatus("not_Ok");\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated))\
    ;\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 14.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //15.mock cxoService call\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.completedFuture(buyNowResponse));\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.ERROR_CALLING_BUY_NOW;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
  \}\
\
  @Test\
  public void renewalSuccess_SoftDecline() throws Exception \{\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated));\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 14.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //15.mock cxoService call\
//    BuyNowResponse buyNowResponse1 = 400.CHECKOUT_SERVICE.IPAE03\
    List<String> list = Collections.singletonList("400.CHECKOUT_SERVICE.IPAE03");\
\
    when(cxoConfig.getBuyNowSoftDeclineCodes()).thenReturn(list);\
\
    BuyNowResponse buyNowResponse1 = getBuyNowSampleErrorResponse();\
\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.failedFuture(new BuyNowException(buyNowResponse1)));\
\
    SubscriptionPurchaseAggregate mockResponse =\
        renewalJobServiceImpl.renewal(buildRenewalConfig()).blockFirst();\
    assertNotNull(mockResponse);\
\
  \}\
\
\
  @Test\
  public void renewalSuccess_SoftDeclineRetryExhausted() throws Exception \{\
\
    Map<String,String> customAttributesMaxRetry = userSubscriptionNew.getCustomAttributes();\
    customAttributesMaxRetry.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT,"6");\
      userSubscriptionNew = UserSubscription\
          .builder(userSubscriptionNew)\
          .customAttributes(customAttributesMaxRetry)\
          .build();\
    // 1. Mock Renewal Table DB call\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.just(renewalSubscriptionScheduled);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    // 2. Mock Renewal Table DB call to schedule\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionScheduled));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionNew));\
\
\
    // 4. Mock User Subscription DB call to update Existing User\
    Map<String, String> customAttributesUpdated = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    customAttributesUpdated.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, Integer.toString(\
        (Integer.parseInt(\
            userSubscriptionNew.getCustomAttributes().get(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT)) + 1))\
    );\
    UserSubscription userSubscriptionUpdated = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributesUpdated)\
        .build();\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionUpdated))\
        .thenReturn(CompletableFuture.completedFuture(newUserSubscriptionDeactivated));\
\
    //5. Mock WalmartPass Config Call for max retry;\
\
    when(walmartPassConfig.getRenewalMaxRetryLimit()).thenReturn(7);\
\
    // 6. Mock Subscription Plan DB call For new Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 7. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 8.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 9.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //10.mock cxoService call\
    List<String> list = Collections.singletonList("400.CHECKOUT_SERVICE.IPAE03");\
\
    when(cxoConfig.getBuyNowSoftDeclineCodes()).thenReturn(list);\
\
    BuyNowResponse buyNowResponse1 = getBuyNowSampleErrorResponse();\
    //src/test/resources/test_response/BuyNowSampleErrorResponse.json\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.failedFuture(new BuyNowException(buyNowResponse1)));\
\
    //11.mock update User Subscription - DB call -through #4\
\
\
    // 12.mock History Event DB create\
    UserSubscriptionHistory userSubscriptionHistoryMock = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistoryMock));\
\
    when(renewalSubscriptionRepository.fetchAllRenewalSubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(getRandomDummyRenewalSubscription(renewalSubscriptionScheduled)));\
\
\
    SubscriptionPurchaseAggregate mockResponse =\
        renewalJobServiceImpl.renewal(buildRenewalConfig()).blockFirst();\
    assertNotNull(mockResponse);\
\
  \}\
\
\
  @Test\
  public void renewalFailure_HardDecline() throws Exception \{\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User and the Update new user to cardChange requested\
    Map<String, String> customAttributes = userSubscriptionNew.getCustomAttributes();\
    customAttributes.put(UserSubCustomAttrConstants.CHANGE_CARD_REQUESTED, "yes");\
\
    UserSubscription userSubscriptionCardChange = UserSubscription\
        .builder(userSubscriptionNew)\
        .customAttributes(customAttributes)\
        .build();\
\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionCardChange));\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 14.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //15.mock cxoService call\
//    BuyNowResponse buyNowResponse1 = 400.CHECKOUT_SERVICE.IPAE03\
    List<String> list = Collections.singletonList("400.CHECKOUT_SERVICE.RANDOM");\
\
    when(cxoConfig.getBuyNowSoftDeclineCodes()).thenReturn(list);\
\
    BuyNowResponse buyNowResponse1 = getBuyNowSampleErrorResponse();\
    //src/test/resources/test_response/BuyNowSampleErrorResponse.json\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.failedFuture(new BuyNowException(buyNowResponse1)));\
\
\
    SubscriptionPurchaseAggregate mockResponse =\
        renewalJobServiceImpl.renewal(buildRenewalConfig()).blockFirst();\
    assertNotNull(mockResponse);\
\
  \}\
\
  @Test\
  public void renewalFailure_ERROR_CALLING_BUY_NOW() throws Exception \{\
\
    // 1. Mock Renewal Table DB call\
\
    Flux<RenewalSubscription> renewalSubscriptionFlux = Flux.fromIterable(renewalSubscriptionList);\
\
    doReturn(renewalSubscriptionFlux).when(renewalSubscriptionRepoExtension)\
        .getRenewalSubscriptionsCustomQuery(any(List.class), any(List.class), any(Integer.class));\
\
    when(renewalSubscriptionRepoExtension.scheduleRenewalSubscription(any()))\
        .thenReturn(Mono.just(renewalSubscriptionList.get(0)));\
\
    // 3. Mock User Subscription DB Call for specific User\
\
    when(userSubscriptionRepository.fetchActiveSubscriptionById(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscription));\
\
    // 4. Mock Subscription Plan DB call\
    //  (i). For new Subscription . (ii). For Old Subscription\
\
    when(walmartPassQueryService.getSubscriptionPlan(any(), any()))\
        .thenReturn(CompletableFuture.completedFuture(subscriptionPlan));\
\
    // 5. User Subscription DB call to Deactivate the Existing User\
    when(userSubscriptionRepository.updateSubscription(any()))\
        .thenReturn(CompletableFuture.completedFuture(userSubscriptionDeactivated));\
\
    // 6. Expiry Table DB call\
    when(expirySubscriptionRepository.fetchAllExpirySubscriptionByDate(any()))\
        .thenReturn(CompletableFuture.completedFuture(Collections.singletonList(expirySubscription)));\
\
    // 7. Mock Update Expiry Subscription DB call\
    ExpirySubscription expirySubscriptionMock = mock(ExpirySubscription.class);\
    when(expirySubscriptionRepository\
        .update(any())).thenReturn(CompletableFuture.completedFuture(expirySubscriptionMock));\
\
    // 8. Mock ExpiryHistory Event DB call\
    UserSubscriptionHistory userSubscriptionHistory = mock(UserSubscriptionHistory.class);\
    when(userSubscriptionHistoryRepository.create(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionHistory));\
\
    // 9. Mock Kafka Publishing\
    Object object = mock(Object.class);\
    when(subscriptionEventKafkaPublisher.sendSubscriptionEvent(any())).thenReturn(Mono.just(object));\
\
    // 10. Mock Create new User DB call\
    when(userSubscriptionRepository.createUserSubscription(any())).thenReturn(\
        CompletableFuture.completedFuture(userSubscriptionNew));\
\
    // 11. Mock Subscription Plan DB call - through #4\
\
    // 12. Mock SPS Service Call\
\
    when(getProfileDetailsService.getFullProfileDetails(any())).thenReturn(\
        CompletableFuture.completedFuture(userFullProfile));\
\
    // 13.mock geolocation-Service call\
    when(geoLocationServiceAdapter.getGeoLocationWithRetry(any())).thenReturn(\
        Mono.just(geoLocationResponse));\
\
    // 14.mock casprService call\
    when(casprServiceAdapter.getServiceEligibilityWithRetry(any(CasprEligibiltyReq.class))).thenReturn(\
        Mono.just(casprEligibilityResponse));\
\
    //15.mock cxoService call\
    when(cxoServiceAdapter.buyNow(any(BuyNowRequest.class), any(String.class), any(Boolean.class),\
        any(Boolean.class), any(), any())).thenReturn(CompletableFuture.failedFuture(new RuntimeException()));\
\
    CaSubscriptionErrorCodes error = CaSubscriptionErrorCodes.ERROR_CALLING_BUY_NOW;\
    executeAndVerify(renewalSubscriptionList.get(0), error, CLIENT_ERROR);\
\
  \}\
\
\
  private void executeAndVerify(RenewalSubscription renewalSubscription, CaSubscriptionErrorCodes error,\
                                String errorType) \{\
    Exception exception = null;\
    SubscriptionPurchaseAggregate mockResponse = null;\
    try \{\
      mockResponse =\
          wpSubscriptionBatchService.renew(renewalSubscription, false).block();\
    \} catch (Exception e) \{\
      exception = e;\
    \}\
    assertNull(mockResponse);\
    assertNotNull(exception);\
    assert (exception instanceof SubscriptionException);\
    SubscriptionException subscriptionException = (SubscriptionException) exception;\
    assertTrue(Objects.equals(errorType, SERVER_ERROR) ?\
        subscriptionException.getSubscriptionError().getHttpStatus().is5xxServerError()\
        : subscriptionException.getSubscriptionError().getHttpStatus().is4xxClientError());\
    assertEquals(error.getErrorCode(), subscriptionException.getSubscriptionError().getErrorCode());\
    assertEquals(error.getErrorMessage(), subscriptionException.getSubscriptionError().getErrorMessage());\
  \}\
\
  private void executeAndVerify(RenewalSubscription renewalSubscription, SubscriptionErrorCodes error,\
                                String errorType) \{\
    Exception exception = null;\
    SubscriptionPurchaseAggregate mockResponse = null;\
    try \{\
      mockResponse =\
          wpSubscriptionBatchService.renew(renewalSubscription, false).block();\
    \} catch (Exception e) \{\
      exception = e;\
    \}\
    assertNull(mockResponse);\
    assertNotNull(exception);\
    assert (exception instanceof SubscriptionException);\
    SubscriptionException subscriptionException = (SubscriptionException) exception;\
    assertTrue(Objects.equals(errorType, SERVER_ERROR) ?\
        subscriptionException.getSubscriptionError().getHttpStatus().is5xxServerError()\
        : subscriptionException.getSubscriptionError().getHttpStatus().is4xxClientError());\
    assertEquals(error.getErrorCode(), subscriptionException.getSubscriptionError().getErrorCode());\
    assertEquals(error.getErrorMessage(), subscriptionException.getSubscriptionError().getErrorMessage());\
  \}\
\
  public List<RenewalSubscription> getRenewalData() \{\
    RenewalSubscription renewalSubscription = RenewalSubscription\
        .builder()\
        .tenantId(SubscriptionTenant.CANADA)\
        .renewalDate(LocalDate.now())\
        .userId("4c8ab353-bd43-499a-84f5-40f33bea4497")\
        .subscriptionId("936709a8-5954-4db2-9bbc-15b7e8f0dd79")\
        .planId("910000010030")\
        .batchStatus(null)\
        .etag(UUID.randomUUID().toString())\
        .build();\
    return Collections.singletonList(renewalSubscription);\
\
  \}\
\
  private RenewalSubscription getRenewalSubscriptionScheduled() \{\
    return RenewalSubscription\
        .builder()\
        .tenantId(SubscriptionTenant.CANADA)\
        .renewalDate(LocalDate.now())\
        .userId("4c8ab353-bd43-499a-84f5-40f33bea4497")\
        .subscriptionId("936709a8-5954-4db2-9bbc-15b7e8f0dd79")\
        .planId("910000010030")\
        .batchStatus(BatchStatus.SCHEDULED)\
        .etag(UUID.randomUUID().toString())\
        .build();\
  \}\
\
  public UserFullProfile getSPSResponse() throws Exception \{\
    String UserFullProfile_Filepath = "src/test/resources/test_response_IT/userFullProfile.json";\
    return JsonConvertorUtil.getObjectMapperInstance()\
        .readValue(Files.readAllBytes(Paths.get(UserFullProfile_Filepath)), UserFullProfile.class);\
  \}\
\
  public GeoLocationResponse getGeoLocationResponse() throws Exception \{\
    return GeoLocationResponse.builder().longitude("long").latitude("lat").postalCode("postal-code").build();\
  \}\
\
  public CasprEligibilityResponse getcasprEligibilityResponse() throws Exception \{\
    String caspr_response_Filepath = "src/test/resources/test_response_IT/caspr_response.json";\
    return JsonConvertorUtil.getObjectMapperInstance()\
        .readValue(Files.readAllBytes(Paths.get(caspr_response_Filepath)), CasprEligibilityResponse.class);\
  \}\
\
  public BuyNowResponse getBuyNowResponse() throws Exception \{\
    String cxo_response_Filepath = "src/test/resources/test_response_IT/BuyNowSampleResponse.json";\
    return JsonConvertorUtil.getObjectMapperInstance()\
        .readValue(Files.readAllBytes(Paths.get(cxo_response_Filepath)), BuyNowResponse.class);\
  \}\
\
  public UserSubscription getUserSubscription() throws Exception \{\
    String userSubscriptionFilePath = "src/test/resources/test_response_IT/userSubscription.json";\
    UserSubscription userSubscriptionFromJson = JsonConvertorUtil.getObjectMapperInstance()\
        .readValue(Files.readAllBytes(Paths.get(userSubscriptionFilePath)),\
            UserSubscription.class);\
    return UserSubscription\
        .builder(userSubscriptionFromJson)\
        .termStartDate(LocalDate.now().minusDays(31))\
        .termEndDate(LocalDate.now().minusDays(1))\
        .userRenewalConfig(\
            UserRenewalConfig\
                .builder()\
                .autoRenew(true)\
                .planId(userSubscriptionFromJson.getPlanId())\
                .renewalDate(LocalDate.now())\
                .build()\
        )\
        .build();\
\
  \}\
\
  public SubscriptionPlan getSubscriptionPlan() throws Exception \{\
\
    String subscriptionPlanFilepath = "src/test/resources/test_response_IT/subscriptionPlanMonthly.json";\
    return JsonConvertorUtil.getObjectMapperInstance()\
        .readValue(Files.readAllBytes(Paths.get(subscriptionPlanFilepath)),\
            SubscriptionPlan.class);\
  \}\
\
  public UserSubscription getUserSubscriptionDeactivated(UserSubscription userSubscription) \{\
    return\
        UserSubscription\
            .builder(userSubscription)\
            .subscriptionStatus(SubscriptionStatus.INACTIVE)\
            .build();\
  \}\
\
  public UserSubscription getuserSubscriptionNew(UserSubscription userSubscription) \{\
\
    Map<String, String> customAttributesNew = new HashMap<>(userSubscription.getCustomAttributes());\
    customAttributesNew.put(UserSubCustomAttrConstants.PREVIOUS_USER_SUBSCRIPTION_ID,\
        userSubscription.getSubscriptionId());\
    customAttributesNew.put(UserSubCustomAttrConstants.RENEWAL_RETRY_COUNT, "1");\
    customAttributesNew.put(UserSubCustomAttrConstants.ORDER_STATUS, OrderStatus.TO_BE_PLACED.toString());\
    customAttributesNew.put(UserSubCustomAttrConstants.PREVIOUS_RENEWAL_DATE,\
        userSubscription.getRenewalDate().get().format(\
            DateTimeFormatter.ISO_DATE));\
    customAttributesNew.put(UserSubCustomAttrConstants.ADDRESS_ID,\
        userSubscription.getCustomAttributes().get(UserSubCustomAttrConstants.ADDRESS_ID));\
    customAttributesNew.put(UserSubCustomAttrConstants.REGION,\
        userSubscription.getCustomAttributes().get(UserSubCustomAttrConstants.REGION));\
\
\
    return UserSubscription\
        .builder(userSubscription)\
        .subscriptionStatus(SubscriptionStatus.ACTIVE)\
        .subscriptionId(UUID.randomUUID().toString())\
        .paymentDetail(PaymentDetail.builder(userSubscription.getPaymentDetails().get())\
            .paymentStatus(PaymentStatus.PROCESS_PENDING).build())\
        .termStartDate(LocalDate.now())\
        .termEndDate(LocalDate.now().plusDays(30))\
        .createdTs(LocalDateTime.now())\
        .termStartTs(LocalDateTime.now())\
        .termEndTs(LocalDateTime.now().plusDays(30))\
        .userRenewalConfig(UserRenewalConfig\
            .builder()\
            .autoRenew(true)\
            .renewalDate(LocalDate.now().plusDays(31))\
            .planId(userSubscription.getPlanId())\
            .build())\
        .customAttributes(customAttributesNew)\
        .build();\
  \}\
\
  private UserSubscription getUserNewSubscriptionDeactivated()\{\
\
\
    Map<String, String> customAttributesNew = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
\
    customAttributesNew.put(UserSubCustomAttrConstants.RENEWAL_FAILURE_REASON, "reason");\
\
    return UserSubscription\
        .builder(userSubscriptionNew)\
        .subscriptionStatus(SubscriptionStatus.INACTIVE)\
        .subscriptionId(UUID.randomUUID().toString())\
        .paymentDetail(PaymentDetail.builder(userSubscription.getPaymentDetails().get())\
            .paymentStatus(PaymentStatus.FAILED).build())\
        .termStartDate(LocalDate.now())\
        .termEndDate(LocalDate.now())\
        .termEndTs(LocalDateTime.now())\
        .customAttributes(customAttributesNew)\
        .build();\
\
  \}\
\
  private UserSubscription getEndUserActivatedAndOrderPlaced() \{\
\
    Map<String, String> additionalCustomAttributes = new HashMap<>(userSubscriptionNew.getCustomAttributes());\
    additionalCustomAttributes.put(UserSubCustomAttrConstants.ORDER_STATUS, OrderStatus.ORDER_PLACED.toString());\
    additionalCustomAttributes.put(UserSubCustomAttrConstants.ORDER_ID,\
        buyNowResponse.getOrders().get(0).getOrderId());\
\
    return UserSubscription\
        .builder(userSubscriptionNew)\
        .paymentDetail(PaymentDetail\
            .builder()\
            .cardId(userSubscriptionNew.getCardId().get())\
            .paymentMethod(CaSubscriptionConstants.PAYMENT_METHOD_CARD)\
            .paymentRequestId(CaSubscriptionConstants.NOT_REQUIRED)\
            .paymentStatus(PaymentStatus.PROCESS_PENDING)\
            .paymentDate(LocalDate.now())\
            .amount(subscriptionPlan.getPlanPriceAmount())\
            .build()\
        )\
        .customAttributes(additionalCustomAttributes)\
        .build();\
  \}\
\
  public ExpirySubscription getExpirySubscription(UserSubscription userSubscription) \{\
    return ExpirySubscription\
        .builder()\
        .batchStatus(null)\
        .tenantId(SubscriptionTenant.CANADA)\
        .expiryDate(LocalDate.now())\
        .userId(userSubscription.getUserId())\
        .subscriptionId(userSubscription.getSubscriptionId())\
        .build();\
  \}\
\
  public RenewalJobConfig buildRenewalConfig() \{\
    return RenewalJobConfig\
        .builder()\
        .batchCount(1)\
        .tenantIds(Arrays.asList(SubscriptionTenant.CANADA.name()))\
        .build();\
  \}\
\
  public List<RenewalSubscription> getRandomDummyRenewalSubscription(RenewalSubscription renewalSubscription) \{\
    List<RenewalSubscription> renewalSubscriptions = new ArrayList<>();\
    for (int i = 0; i < 20; i++) \{\
      renewalSubscriptions.add(\
          RenewalSubscription\
              .builder()\
              .tenantId(SubscriptionTenant.CANADA)\
              .renewalDate(LocalDate.now())\
              .userId(UUID.randomUUID().toString())\
              .subscriptionId(UUID.randomUUID().toString())\
              .planId("910000010030")\
              .batchStatus(null)\
              .etag(UUID.randomUUID().toString())\
              .build()\
      );\
    \}\
    renewalSubscriptions.add(renewalSubscription);\
    Collections.shuffle(renewalSubscriptions);\
    return renewalSubscriptions;\
  \}\
\
  public BuyNowResponse getBuyNowSampleErrorResponse() throws Exception \{\
\
    String subscriptionPlanFilepath = "src/test/resources/test_response_IT/BuyNowSampleErrorResponse.json";\
    return JsonConvertorUtil.getObjectMapperInstance()\
        .readValue(Files.readAllBytes(Paths.get(subscriptionPlanFilepath)),\
            BuyNowResponse.class);\
  \}\
\
  // After 1st try Success\
// After 7th try Expiry\
// CHANGE_CARD_REQUESTED_AndRenewalRetryExhausted\
\
//Errors\
  //SUBSCRIPTION_NOT_ELIGIBLE_FOR_RENEWAL_subscriptionInactive_validationError\
  //SUBSCRIPTION_ORDER_PLACED\
  //INVALID_SINGLE_PROFILE_USER_ID\
  //PAYMENT_DETAILS_NOT_FOUND\
  //CARD_ID_NOT_PRESENT_IN_USER_PROFILE\
  //CARD_EXPIRED\
  //DELIVERY_ADDRESS_NOT_FOUND_IN_USER_PROFILE\
  //GEO_LOCATION_RESPONSE_ERROR\
  //ADDRESS_IS_NOT_ELIGIBLE_FOR_DELIVERY\
  //CASPR_SERVICE_ELIGIBILITY_RESPONSE_ERROR\
  //ERROR_CALLING_BUY_NOW\
\
\
\}\
\
\
}