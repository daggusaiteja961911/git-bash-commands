This method is a public method in the BillerCoreService class that fetches and caches biller data based on the provided processorBillerId. It delegates the actual fetching and caching logic to another overloaded method by passing null as the billerId.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
try {
    Biller biller = billerCoreService.fetchAndCacheBillerData("processorBillerId123");
    // Use the fetched biller data
} catch (ApplicationException e) {
    // Handle exception
}
Code Analysis
Inputs
processorBillerId: A String representing the ID of the processor biller.
 
Flow
The method calls the overloaded fetchAndCacheBillerData method.
It passes null as the billerId and the provided processorBillerId.
 
Outputs
Returns a Biller object containing the fetched and cached biller data.
..................................................................................
The fetchAndCacheBillerData method retrieves biller data from the cache or database and caches it if not already present. It uses either a UUID or a processorBillerId to identify the biller.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
UUID billerId = UUID.randomUUID();
String processorBillerId = "12345";
try {
    Biller biller = billerCoreService.fetchAndCacheBillerData(billerId, processorBillerId);
    System.out.println(biller);
} catch (ApplicationException e) {
    e.printStackTrace();
}
Code Analysis
Inputs
UUID billerId: Unique identifier for the biller.
String processorBillerId: Processor-specific identifier for the biller.
 
Flow
Generate cache keys based on billerId and processorBillerId.
Attempt to fetch biller data from the cache.
If cache miss, retrieve biller data from the database.
Prepare the Biller object from the retrieved data.
Cache the Biller object and its update timestamp.
 
Outputs
Returns a Biller object containing the biller data.
 
..................................................................................
The fetchBillerDataFromCache method attempts to retrieve a Biller object from the cache using either a UUID-based or a processor-based cache key. It logs the results or any errors encountered during the process.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
String billerDataCacheKeyUUID = "some-uuid-key";
String billerDataCacheKey = "some-processor-key";
Biller biller = billerCoreService.fetchBillerDataFromCache(billerDataCacheKeyUUID, billerDataCacheKey);
Code Analysis
Inputs
billerDataCacheKeyUUID: A String representing the UUID-based cache key.
billerDataCacheKey: A String representing the processor-based cache key.
 
Flow
Initialize a Biller object to null.
Check if billerDataCacheKeyUUID is not empty.
If true, attempt to fetch the Biller from the cache using billerDataCacheKeyUUID.
Log the result or any error encountered.
If billerDataCacheKeyUUID is empty, check if billerDataCacheKey is not empty.
If true, attempt to fetch the Biller from the cache using billerDataCacheKey.
Log the result or any error encountered.
Return the fetched Biller object.
 
Outputs
Returns a Biller object if found in the cache, otherwise returns null.
..................................................................................
The prepareBillerFromDO method converts a BillerDO object into a Biller object by mapping its properties and setting additional attributes such as bill plans, sub-billers, the maximum update timestamp, and the biller behavior code.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
BillerDO billerDO = new BillerDO();
// Set properties on billerDO as needed
Biller biller = billerCoreService.prepareBillerFromDO(billerDO);
Code Analysis
Inputs
BillerDO billerDO: The data object representing the biller to be converted.
 
Flow
Check if billerDO is null; if so, return null.
Map billerDO to a Biller object without sub-billers and bill plans.
Set the bill plans on the Biller object using billerMapper.
Set the sub-billers on the Biller object using billerMapper.
Compute and set the maximum update timestamp for the Biller object using BillPayUtil.
Compute and set the biller behavior code for the Biller object using BillPayUtil.
Return the fully prepared Biller object.
 
Outputs
Biller: The fully populated Biller object.
 
..................................................................................
The getBillerDO method retrieves a BillerDO object from the database based on either a billerId or a processorBillerId. It throws specific exceptions if the biller is not found or if there are issues during the database fetch.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
UUID billerId = UUID.randomUUID();
String processorBillerId = "processor123";
try {
    BillerDO billerDO = billerCoreService.getBillerDO(billerId, processorBillerId);
    // Use the retrieved billerDO object
} catch (ApplicationException e) {
    // Handle exception
}
Code Analysis
Inputs
UUID billerId: The unique identifier for the biller.
String processorBillerId: The processor-specific identifier for the biller.
 
Flow
Check if billerId is not null.
If billerId is not null, attempt to fetch the BillerDO from the repository using billerId.
If billerId is null, check if processorBillerId is not null.
If processorBillerId is not null, attempt to fetch the BillerDO from the repository using processorBillerId.
Handle exceptions and throw specific exceptions if the biller is not found or if there are issues during the fetch.
 
Outputs
Returns a BillerDO object if found.
Throws BusinessValidationException if the biller is not found or not enabled.
Throws ProcessingException if there is an error during the database fetch.
..................................................................................
The getBillerCategoriesList method retrieves a list of BillerCategory objects for a given billerCategoryVersion. It first attempts to fetch the data from a cache. If the data is not found in the cache, it fetches the data from the database and updates the cache.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
Integer billerCategoryVersion = 1;
List<BillerCategory> categories = billerCoreService.getBillerCategoriesList(billerCategoryVersion);
categories.forEach(category -> System.out.println(category.getCategoryName()));
Code Analysis
Inputs
billerCategoryVersion: An Integer representing the version of the biller category to be retrieved.
 
Flow
Construct a cache key using the billerCategoryVersion.
Attempt to fetch the list of BillerCategory from the cache using the constructed key.
Log the result of the cache fetch attempt.
If the cache fetch fails or returns an empty list, fetch the data from the database and update the cache.
Return the list of BillerCategory.
 
Outputs
A List<BillerCategory> containing the biller categories for the specified version.
 
..................................................................................
The fetchAndCacheBillerCategoriesMap method retrieves biller categories from the database based on provided versions, maps them to a list of BillerCategory objects, and caches the results. If the data is successfully fetched and mapped, it is stored in a cache with appropriate keys.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<Integer> versions = Arrays.asList(1, 2, 3);
Map<Integer, List<BillerCategory>> result = billerCoreService.fetchAndCacheBillerCategoriesMap(versions);
Code Analysis
Inputs
List<Integer> billerCategoryVersions: A list of integers representing the versions of biller categories to be fetched.
 
Flow
Initialize an empty map to store the version-to-biller categories mapping.
Fetch the biller category version mappings from the database.
If the fetched data is not empty, map it to a list of BillerCategory objects.
Populate the version-to-biller categories map.
Cache each entry in the map with a specific key.
Return the populated map.
 
Outputs
Map<Integer, List<BillerCategory>>: A map where the key is the biller category version and the value is a list of BillerCategory objects.
 
..................................................................................
This method, mapBillerVersionToBillerCategories, organizes a list of BillerCategory objects into a map where the keys are biller category versions and the values are lists of BillerCategory objects corresponding to each version.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<BillerCategory> billerCategories = Arrays.asList(
    new BillerCategory(UUID.randomUUID(), "Category1", "url1", 1, true, false, null),
    new BillerCategory(UUID.randomUUID(), "Category2", "url2", 1, true, false, null),
    new BillerCategory(UUID.randomUUID(), "Category3", "url3", 2, true, false, null)
);
Map<Integer, List<BillerCategory>> result = billerCoreService.mapBillerVersionToBillerCategories(billerCategories);
// Expected output: {1=[Category1, Category2], 2=[Category3]}
Code Analysis
Inputs
billerCategories: A list of BillerCategory objects.
 
Flow
Initialize an empty HashMap to store the mapping.
Iterate over each BillerCategory in the input list.
For each BillerCategory, check if its version is already a key in the map.
If the version is not a key, add it with an empty list as the value.
Add the BillerCategory to the list corresponding to its version.
Return the populated map.
 
Outputs
A Map where keys are biller category versions (integers) and values are lists of BillerCategory objects.
..................................................................................
This method retrieves the last updated timestamp for biller category data. It first attempts to fetch the timestamp from the cache. If the cache does not contain the data, it fetches the timestamp from the database and updates the cache.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
Date lastUpdatedTimestamp = billerCoreService.fetchBillerCategoryDataLastUpdatedAtTimestamp();
System.out.println("Last updated timestamp: " + lastUpdatedTimestamp);
Code Analysis
Inputs
None
 
Flow
Attempt to retrieve the last updated timestamp from the cache using wmClient.get.
Log the retrieved timestamp or any error encountered during the cache fetch.
If the timestamp is not found in the cache, fetch it from the database using fetchAndCacheBillerCategoryDataUpdatedAtTimestamp.
Return the retrieved timestamp.
 
Outputs
Returns a Date object representing the last updated timestamp for biller category data.
 
..................................................................................
This method fetches the last updated timestamp for biller category data from the database and caches it. If an error occurs during the database fetch, it throws a ProcessingException.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
Date lastUpdatedTimestamp = billerCoreService.fetchAndCacheBillerCategoryDataUpdatedAtTimestamp();
System.out.println("Last Updated Timestamp: " + lastUpdatedTimestamp);
Code Analysis
Inputs
None
 
Flow
Fetch the last updated timestamp for biller category data from the database.
If an error occurs, throw a ProcessingException.
Cache the fetched timestamp using wmClient.
Log the caching operation's status.
Return the fetched timestamp.
 
Outputs
Returns the Date object representing the last updated timestamp for biller category data.
..................................................................................
The fetchBillerDataLastUpdatedAtMap method retrieves the last updated timestamps for biller data from the cache or database. It first attempts to fetch the data from the cache. If the data is not found or incomplete, it fetches the missing data from the database and updates the cache.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<UUID> billerIds = Arrays.asList(UUID.randomUUID(), UUID.randomUUID());
List<String> processorBillerIds = Arrays.asList("processorBillerId1", "processorBillerId2");
Map<String, Object> result = billerCoreService.fetchBillerDataLastUpdatedAtMap(billerIds, processorBillerIds);
System.out.println(result);
Code Analysis
Inputs
List<UUID> billerIds: A list of biller IDs.
List<String> processorBillerIds: A list of processor biller IDs.
 
Flow
Attempt to fetch the last updated timestamps from the cache.
If the cache is empty or incomplete, fetch the missing data from the database.
Update the cache with the newly fetched data.
Return the complete map of last updated timestamps.
 
Outputs
Map<String, Object>: A map containing the last updated timestamps for the specified biller IDs and processor biller IDs.
 
..................................................................................
The method fetchBillerDataLastUpdatedAtMapFromCache retrieves the last updated timestamps for biller data from the cache. It takes two lists as input: one with biller IDs and another with processor biller IDs. Depending on which list is non-empty, it constructs cache keys and fetches the corresponding data from the cache.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<UUID> billerIds = Arrays.asList(UUID.randomUUID(), UUID.randomUUID());
List<String> processorBillerIds = Arrays.asList("processor1", "processor2");
Map<String, Object> result = billerCoreService.fetchBillerDataLastUpdatedAtMapFromCache(billerIds, processorBillerIds);
Code Analysis
Inputs
List<UUID> billerIds: A list of biller IDs.
List<String> processorBillerIds: A list of processor biller IDs.
 
Flow
Initialize an empty map to store the fetched data.
Check if the billerIds list is non-empty.
If billerIds is non-empty, construct cache keys using the biller IDs and fetch the data from the cache.
If billerIds is empty but processorBillerIds is non-empty, construct cache keys using the processor biller IDs and fetch the data from the cache.
Handle any exceptions that occur during the cache fetch operation.
Return the map containing the fetched data.
 
Outputs
Map<String, Object>: A map containing the last updated timestamps for the biller data fetched from the cache.
..................................................................................
The method fetchBillerDataLastUpdatedAtMapFromDB retrieves the last updated timestamps for biller data from the database and caches them. It handles both UUID and processor biller ID inputs.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<UUID> billerIds = Arrays.asList(UUID.randomUUID());
List<String> processorBillerIds = Arrays.asList("processorBillerId1");
Map<String, Object> result = billerCoreService.fetchBillerDataLastUpdatedAtMapFromDB(billerIds, processorBillerIds);
Code Analysis
Inputs
List<UUID> billerIds: List of biller UUIDs.
List<String> processorBillerIds: List of processor biller IDs.
 
Flow
Initialize an empty map billerDataLastUpdateAtMap.
Fetch biller data from the database based on billerIds or processorBillerIds.
For each biller, compute the last updated timestamp.
Generate cache keys and store the timestamps in the map.
Cache the timestamps using wmClient.
 
Outputs
Map<String, Object>: A map containing cache keys and their corresponding last updated timestamps.
..................................................................................
This code defines two methods for reloading cache data related to biller categories and incorrect search keywords.
Example Usage
BillerCoreService service = new BillerCoreService();
service.reloadCacheForBillerCategoryData(List.of(1, 2, 3));
service.reloadIncorrectSearchDataInCache();
Code Analysis
Inputs
billerCategoryVersions: A list of integers representing biller category versions.
 
Flow
reloadCacheForBillerCategoryData checks if the input list is not empty and then fetches and caches biller categories and their last updated timestamp.
reloadIncorrectSearchDataInCache fetches and caches incorrect search keywords and their last updated timestamp.
 
Outputs
The methods update the cache with the latest biller category data and incorrect search keywords.
 
..................................................................................
Summary
The reloadCacheForBillerData method refreshes the cache for a set of billers identified by their processorBillerIds. It fetches biller data from the database, evicts cache entries for billers not found in the database, and updates the cache with the latest biller data.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
Set<String> processorBillerIds = new HashSet<>(Arrays.asList("billerId1", "billerId2"));
Set<String> retryProcessorBillerIds = billerCoreService.reloadCacheForBillerData(processorBillerIds);
Code Analysis
Inputs
processorBillerIds: A set of strings representing the IDs of the billers to be reloaded into the cache.
 
Flow
Initialize a set to track biller IDs that need to be retried.
Convert the input set of processorBillerIds to a list.
Fetch biller data from the database for the given IDs.
Identify biller IDs that are not present in the database and evict their cache entries.
Filter and prepare billers to be cached based on certain conditions.
Reload the cache with the prepared biller data and update timestamps.
Return the set of biller IDs that need to be retried.
 
Outputs
Returns a set of processorBillerIds that need to be retried for caching.
..................................................................................
This method evicts cache entries for billers that are no longer present in the database. It logs the start and end of the eviction process and deletes specific cache keys related to each biller.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<String> processorBillerIdsToEvict = Arrays.asList("12345", "67890");
billerCoreService.evictDataFromCacheForBillersNotPresentInDB(processorBillerIdsToEvict);
Code Analysis
Inputs
processorBillerIdsToEvict: A list of String representing the IDs of the billers to be evicted from the cache.
 
Flow
Logs the start of the cache eviction process.
Iterates over each processorBillerId in the input list.
Constructs cache keys for biller data and biller data updated timestamp.
Deletes the cache entries for these keys and logs the status of each deletion.
Logs the end of the cache eviction process.
 
Outputs
No direct output. The method performs cache eviction and logs the process.
..................................................................................
The reloadCacheForBillerAndUpdateTimestampData method updates the cache with new biller data and their last updated timestamps. It processes a list of BillerDO objects, prepares the corresponding Biller objects, and stores them in the cache. If any cache operations fail, it collects the processor biller IDs for retry.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<BillerDO> billersToCache = Arrays.asList(billerDO1, billerDO2);
Set<String> retryProcessorBillerIds = billerCoreService.reloadCacheForBillerAndUpdateTimestampData(billersToCache);
Code Analysis
Inputs
List<BillerDO> billersToCache: A list of BillerDO objects to be cached.
 
Flow
Initialize retryProcessorBillerIds, billerDataFutureList, and billerDataUpdatedAtTimestampFutureList.
Iterate over each BillerDO in billersToCache.
Prepare a Biller object from each BillerDO.
Generate cache keys and add cache operations to the respective lists.
Filter and collect processor biller IDs for failed cache operations.
Return the set of processor biller IDs that need to be retried.
 
Outputs
Set<String>: A set of processor biller IDs for which cache operations failed and need to be retried.
 
..................................................................................
The getPopularBillers method retrieves a list of popular billers and their sub-billers from the database. If the retrieval fails or no popular billers are found, it throws appropriate exceptions.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
try {
    List<Biller> popularBillers = billerCoreService.getPopularBillers();
    popularBillers.forEach(biller -> System.out.println(biller.getBillerName()));
} catch (BusinessValidationException e) {
    System.err.println("No popular billers found: " + e.getMessage());
} catch (ProcessingException e) {
    System.err.println("Error fetching popular billers: " + e.getMessage());
}
Code Analysis
Inputs
None
 
Flow
Attempts to fetch popular billers and their sub-billers from the database using billerRepository.getPopularBillersAndSubBillers().
If an exception occurs during the database fetch, it throws a ProcessingException.
Checks if the fetched list is empty; if so, throws a BusinessValidationException.
Maps the list of BillerDO objects to Biller objects using billerMapper.mapBillerDOsToBillerList.
 
Outputs
Returns a list of Biller objects representing popular billers and their sub-billers.
..................................................................................
The method evictCacheForBillerAndUpdateTimestampData evicts cache entries for a list of biller IDs and returns a set of biller IDs for which the eviction failed.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<String> processorBillerIdsToEvict = Arrays.asList("12345", "67890");
Set<String> failedEvictions = billerCoreService.evictCacheForBillerAndUpdateTimestampData(processorBillerIdsToEvict);
System.out.println("Failed Evictions: " + failedEvictions);
Code Analysis
Inputs
processorBillerIdsToEvict: A list of biller IDs whose cache entries need to be evicted.
 
Flow
Initialize a set to store biller IDs for which eviction fails.
Initialize two lists to store the futures of cache deletion operations.
Iterate over the list of biller IDs to evict.
For each biller ID, construct cache keys for biller data and its last updated timestamp.
Add the deletion operations for these keys to the respective lists.
Use BillPayUtil.filterBillersFailedToCache to filter out biller IDs for which the cache eviction failed and add them to the retry set.
Return the set of biller IDs for which eviction failed.
 
Outputs
A set of biller IDs for which the cache eviction failed.

..................................................................................
This method retrieves a list of processor biller IDs for billers whose data is cached. It interacts with the billerRepository to fetch the data and handles any exceptions by throwing a ProcessingException.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<String> cachedBillerIds = billerCoreService.getProcessorBillerIdsOfBillersWhoseDataIsCached();
System.out.println(cachedBillerIds);
Code Analysis
Inputs
None
 
Flow
Calls billerRepository.getProcessorBillerIdsOfBillersWhoseDataIsCached() to fetch the list of processor biller IDs.
If an exception occurs, it logs an error message and throws a ProcessingException.
 
Outputs
Returns a List<String> containing processor biller IDs.
Throws a ProcessingException if there is an error fetching data from the database.
..................................................................................
Summary
The fetchBillerIncorrectSearchKeywordMap method retrieves a map of incorrect search keywords for billers from the cache. If the data is not found in the cache, it fetches the data from the database and caches it.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
HashMap<String, List<String>> incorrectSearchKeywords = billerCoreService.fetchBillerIncorrectSearchKeywordMap();
Code Analysis
Inputs
None
 
Flow
Initialize an empty HashMap for billerIncorrectSearchKeywordsMap.
Attempt to retrieve the map from the cache using a predefined cache key.
Log the retrieved data or an error if the cache read fails.
If the map is not found in the cache, fetch it from the database and cache it.
Return the billerIncorrectSearchKeywordsMap.
 
Outputs
A HashMap<String, List<String>> containing incorrect search keywords for billers.
..................................................................................
The method fetchAndCacheBillerIncorrectSearchKeywordMap retrieves incorrect biller search keywords from the database, processes them into a map, and caches the result.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
HashMap<String, List<String>> incorrectSearchKeywordsMap = billerCoreService.fetchAndCacheBillerIncorrectSearchKeywordMap();
Code Analysis
Inputs
None
 
Flow
Retrieve all enabled BillerSearchDO objects from the database.
Convert the list of BillerSearchDO objects into a map where the key is the incorrect keyword and the value is a list of biller names.
Remove any null values from the map.
Cache the map using wmClient.
Return the final map.
 
Outputs
A HashMap<String, List<String>> containing incorrect biller search keywords and their corresponding biller names.
..................................................................................
This method, getBillerNamesFromBillerIncorrectMappingSet, filters a list of BillerDO objects to include only those that are enabled, and then maps them to their respective biller names.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
List<BillerDO> billers = Arrays.asList(
    new BillerDO(UUID.randomUUID(), "Biller1", true),
    new BillerDO(UUID.randomUUID(), "Biller2", false)
);
List<String> enabledBillerNames = billerCoreService.getBillerNamesFromBillerIncorrectMappingSet(billers);
// enabledBillerNames will contain ["Biller1"]
Code Analysis
Inputs
billersDOList: A list of BillerDO objects.
 
Flow
Check if the input list billersDOList is null or empty.
If it is, return an empty list.
Otherwise, filter the list to include only enabled BillerDO objects.
Map the filtered list to their respective biller names.
Return the list of biller names.
 
Outputs
A list of strings representing the names of enabled billers.
..................................................................................
The fetchBillerIncorrectSearchDataUpdateTimestamp method retrieves the last updated timestamp for incorrect biller search data from the cache. If the data is not found in the cache, it fetches and caches the timestamp from the database.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
Date lastUpdatedTimestamp = billerCoreService.fetchBillerIncorrectSearchDataUpdateTimestamp();
System.out.println("Last Updated Timestamp: " + lastUpdatedTimestamp);
Code Analysis
Inputs
None
 
Flow
Attempt to retrieve the last updated timestamp from the cache using wmClient.get.
Log the retrieved timestamp or any error encountered during the cache retrieval.
If the timestamp is not found in the cache, fetch and cache it from the database.
Return the last updated timestamp.
 
Outputs
Returns a Date object representing the last updated timestamp for incorrect biller search data.
..................................................................................
Summary
This method fetches the last updated timestamp for incorrect biller search data from the database and caches it. It logs the status of the cache operation.
Example Usage
BillerCoreService billerCoreService = new BillerCoreService();
Date lastUpdatedTimestamp = billerCoreService.fetchAndCacheBillerIncorrectSearchDataUpdateTimestamp();
System.out.println("Last Updated Timestamp: " + lastUpdatedTimestamp);
Code Analysis
Inputs
None
 
Flow
Fetch the last updated timestamp for incorrect biller search data from the database using billerSearchRepository.
Cache the fetched timestamp using wmClient.
Log the status of the cache operation.
Return the fetched timestamp.
 
Outputs
Returns the last updated timestamp for incorrect biller search data.
..................................................................................
..................................................................................
..................................................................................
