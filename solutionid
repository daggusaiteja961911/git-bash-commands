import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import com.yourpackage.dto.SchoolerByIdDTO;
import com.yourpackage.dto.SchoolDetailDTO;
import com.yourpackage.dto.SchoolPlanDTO;
import com.yourpackage.dto.SchoolerInformation;
import com.yourpackage.response.SchoolerByIdResponse;
import com.yourpackage.service.SchoolerService;
import com.yourpackage.controller.SchoolerControllerImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.http.MediaType;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.UUID;

@WebMvcTest(SchoolerControllerImpl.class)
public class SchoolerControllerImplTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private SchoolerService schoolerService;

    private UUID schoolerId;
    private String processorSchoolerId;
    private SchoolerByIdResponse mockResponse;

    @BeforeEach
    public void setUp() {
        schoolerId = UUID.fromString("09a09584-2568-11eb-80ff-fa163e3d3c63");
        processorSchoolerId = "29866";

        // Setting up the mock response
        SchoolerInformation schoolerInformation = SchoolerInformation.builder()
                .schoolerId(schoolerId)
                .processorSchoolerId(processorSchoolerId)
                .displayName("Bait")
                .productDisplayName("Recarga celular")
                .imageURL("https://cashi.walmart.com/Providers-Icons/PNG_NEW/Bait_080923.png")
                .schoolerBehaviourCode("BBC_1")
                .termsAndConditions("https://mibait.com/tyc.html")
                .information("<p>Para más información visita <a href=\"https://mibait.com/\">https://mibait.com/</a></p>")
                .disclaimer("Todas las recargas incluyen: Llamadas (Nacionales y larga distancia a EUA y Canadá) SMS y navegación en redes sociales.")
                .build();

        SchoolDetailDTO schoolDetail = SchoolDetailDTO.builder()
                .schoolDetailId(UUID.fromString("1befa3cb-cbd4-da41-a7c9-d03ec4063e3a"))
                .amount(BigDecimal.valueOf(30.00))
                .name("Mi Bait 30")
                .description("4,000 MB libres / 3 días. 250 Min en llamadas (MEX, EUA y CAN) y 125 SMS")
                .validity("Válido por 3 días")
                .socialMediaIcons(new String[]{"WHATSAPP", "FACEBOOK", "MESSENGER"})
                .build();

        SchoolPlanDTO schoolPlan = SchoolPlanDTO.builder()
                .plan("Tiempo Aire")
                .schoolDetails(Collections.singletonList(schoolDetail))
                .build();

        SchoolerByIdDTO schoolerByIdDTO = SchoolerByIdDTO.builder()
                .schoolerId(schoolerId)
                .processorSchoolerId(processorSchoolerId)
                .displayName("Bait")
                .schoolerType("Tiempo aire")
                .schoolType("phone_number")
                .prepaid(true)
                .schoolPlans(Collections.singletonList(schoolPlan))
                .inputPlaceholderText("Número celular")
                .topupCommission("0.00")
                .build();

        mockResponse = SchoolerByIdResponse.builder()
                .schoolerInformation(schoolerInformation)
                .schoolers(Collections.singletonList(schoolerByIdDTO))
                .lastUpdatedAt(LocalDateTime.parse("2024-08-21T13:22:22"))
                .build();
    }

    @Test
    public void testGetSchoolerById() throws Exception {
        // Mocking the service response
        when(schoolerService.getSchoolerById(schoolerId, processorSchoolerId)).thenReturn(mockResponse);

        // Testing the controller endpoint with MockMvc
        mockMvc.perform(get("/services/schooler-data/v1/schooler/{schoolerId}", schoolerId)
                        .param("processorSchoolerId", processorSchoolerId)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.schoolerInformation.displayName").value("Bait"))
                .andExpect(jsonPath("$.schoolers[0].displayName").value("Bait"))
                .andExpect(jsonPath("$.schoolers[0].schoolPlans[0].plan").value("Tiempo Aire"))
                .andExpect(jsonPath("$.schoolers[0].schoolPlans[0].schoolDetails[0].name").value("Mi Bait 30"))
                .andDo(print());

        // Verifying that the service method was called once
        verify(schoolerService, times(1)).getSchoolerById(schoolerId, processorSchoolerId);
    }
}
