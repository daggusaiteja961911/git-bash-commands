Doubts

BillPaymentControllerIT:â€¨package com.walmart.international.wallet.payment.app.integrationTest;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.walmart.international.wallet.payment.app.CommonUtil2;
import com.walmart.international.wallet.payment.app.WPSTestLoader;
import com.walmart.international.wallet.payment.app.auth.WPSAuthValidator;
import com.walmart.international.wallet.payment.app.controller.impl.billpay.BillPaymentControllerImpl;
import com.walmart.international.wallet.payment.app.service.BillPaymentService;
import com.walmart.international.wallet.payment.core.config.ccm.BillPaymentConfiguration;
import com.walmart.international.wallet.payment.core.constants.WPSConstants;
import com.walmart.international.wallet.payment.core.exception.DataConstraintViolationException;
import com.walmart.international.wallet.payment.core.exception.WPSErrorCodes;
import com.walmart.international.wallet.payment.dto.request.billpay.*;
import com.walmart.international.wallet.payment.dto.response.billpay.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import java.util.Objects;
import java.util.UUID;

import static com.walmart.international.wallet.payment.app.APIUrlConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.times;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ActiveProfiles("test")
@SpringBootTest(classes = WPSTestLoader.class)
@ExtendWith(MockitoExtension.class)
@WebAppConfiguration
@AutoConfigureMockMvc
public class BillPaymentControllerIT {
    private static final String INTEGRATION_TEST_FLOW = "IntegrationTestFlow";
    final String SERVER_ERROR = "serverError";
    final String CLIENT_ERROR = "clientError";

    static {
        System.setProperty(INTEGRATION_TEST_FLOW, String.valueOf(true));
    }

    @Autowired
    private MockMvc mockMvc;

    private ObjectMapper objectMapper;

    @MockBean
    private BillPaymentService billPaymentService;

    @MockBean
    private WPSAuthValidator wpsAuthValidator;

    @Autowired
    private BillPaymentControllerImpl billPaymentController;

    @MockBean
    private BillPaymentConfiguration billPaymentConfiguration;

    private HttpHeaders httpHeaders;
//
//    private PayBillInitRequest payBillInitRequest;
//    private CancelPayBillInitRequest cancelPayBillInitRequest;
//    private ValidatePayBillInitRequest validatePayBillInitRequest;
//    private ReconcilePendingBillPayTxnRequest reconcilePendingBillPayTxnRequest;

    FetchBillPayPaymentInstrumentsRequest fetchBillPayPaymentInstrumentsRequest = new FetchBillPayPaymentInstrumentsRequest();
    MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testBillPaymentController_Success() throws Exception {
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();

        // Arrange
        //FetchBillPayPaymentInstrumentsRequest fetchBillPayPaymentInstrumentsRequest = new FetchBillPayPaymentInstrumentsRequest();
        fetchBillPayPaymentInstrumentsRequest.setCustomerAccountId(UUID.randomUUID());

        PayBillInitRequest payBillInitRequest = new PayBillInitRequest();
        payBillInitRequest.setCustomerAccountId(UUID.randomUUID());

        CancelPayBillInitRequest cancelPayBillInitRequest = new CancelPayBillInitRequest();
        cancelPayBillInitRequest.setCustomerAccountId(UUID.randomUUID());

        ValidatePayBillInitRequest validatePayBillInitRequest = new ValidatePayBillInitRequest();
        validatePayBillInitRequest.setCustomerAccountId(UUID.randomUUID());

        ReconcilePendingBillPayTxnRequest reconcilePendingBillPayTxnRequest = new ReconcilePendingBillPayTxnRequest();
        reconcilePendingBillPayTxnRequest.setTxnId(UUID.randomUUID());

        FetchBillPayPaymentInstrumentsResponse expectedfetchBillPayPaymentInstrumentsResponse = mock(FetchBillPayPaymentInstrumentsResponse.class);
        FetchBillPayPaymentInstrumentsWithPreselectionResponse expectedfetchBillPayPaymentInstrumentsWithPreselectionResponse = mock(FetchBillPayPaymentInstrumentsWithPreselectionResponse.class);
        PayBillInitResponse expectedpayBillInitResponse = mock(PayBillInitResponse.class);
        ValidatePayBillInitResponse expectedvalidatePayBillInitResponse = mock(ValidatePayBillInitResponse.class);
        ReconcilePendingBillPayTxnResponse expectedreconcilePendingBillPayTxnResponse = mock(ReconcilePendingBillPayTxnResponse.class);

        when(billPaymentService.fetchBillPayPaymentInstruments(fetchBillPayPaymentInstrumentsRequest, headers)).thenReturn(expectedfetchBillPayPaymentInstrumentsResponse);
        when(billPaymentService.fetchBillPayPaymentInstrumentsWithPreselection(fetchBillPayPaymentInstrumentsRequest, headers)).thenReturn(expectedfetchBillPayPaymentInstrumentsWithPreselectionResponse);
        when(billPaymentService.payBillInit(payBillInitRequest, headers)).thenReturn(expectedpayBillInitResponse);
        when(billPaymentService.validatePayBillInit(validatePayBillInitRequest, headers)).thenReturn(expectedvalidatePayBillInitResponse);
//        when(billPaymentConfiguration.)
        when(billPaymentService.reconcilePendingBillPayTxn(reconcilePendingBillPayTxnRequest, headers)).thenReturn(expectedreconcilePendingBillPayTxnResponse);

        // Act
        FetchBillPayPaymentInstrumentsResponse actualfetchBillPayPaymentInstrumentsResponse = billPaymentController.fetchBillPayPaymentInstruments(fetchBillPayPaymentInstrumentsRequest, headers);
        FetchBillPayPaymentInstrumentsWithPreselectionResponse actualfetchBillPayPaymentInstrumentsWithPreselectionResponse = billPaymentController.fetchBillPayPaymentInstrumentsWithPreselection(fetchBillPayPaymentInstrumentsRequest, headers);
        PayBillInitResponse actualpayBillInitResponse = billPaymentController.payBillInit(payBillInitRequest, headers);
        ValidatePayBillInitResponse actualvalidatePayBillInitResponse = billPaymentController.validatePayBillInit(validatePayBillInitRequest, headers);
        ReconcilePendingBillPayTxnResponse actualreconcilePendingBillPayTxnResponse = billPaymentController.reconcilePendingBillPayTxn(reconcilePendingBillPayTxnRequest, headers);

//        mockMvc.perform(post(PAYBILL_INIT)
//                .contentType(MediaType.APPLICATION_JSON)
//                .content("{}"))
//                .andExpect(status().isBadRequest());
//
////        mockMvc.perform(post(FETCH_BILLPAYMENT_INSTRUMENTS)
////                        .contentType(MediaType.APPLICATION_JSON)
////                        .content("{}"))
////                .andExpect(status().isBadRequest());
//
//        mockMvc.perform(post(FETCH_BILLPAYMENT_INSTRUMENTS_WITH_PRESELECTION)
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content("{}"))
//                .andExpect(status().isBadRequest());
//
//        mockMvc.perform(post(CANCEL_PAYBILL_INIT)
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content("{}"))
//                .andExpect(status().isBadRequest());
//
//        mockMvc.perform(post(VALIDATE_PAYBILL_INIT)
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content("{}"))
//                .andExpect(status().isBadRequest());

        // Assert
        assertNotNull(actualfetchBillPayPaymentInstrumentsResponse);
        assertNotNull(actualfetchBillPayPaymentInstrumentsWithPreselectionResponse);
        assertNotNull(actualpayBillInitResponse);
        assertNotNull(actualvalidatePayBillInitResponse);
        assertNotNull(actualreconcilePendingBillPayTxnResponse);

        WPSErrorCodes error = WPSErrorCodes.INVALID_REQUEST;

        executeAndVerifyBillPayment(error, CLIENT_ERROR);

        verify(wpsAuthValidator, times(2)).validateHeaderUserId(String.valueOf(fetchBillPayPaymentInstrumentsRequest.getCustomerAccountId()), headers);
        verify(billPaymentService, times(1)).fetchBillPayPaymentInstruments(fetchBillPayPaymentInstrumentsRequest, headers);
        verify(wpsAuthValidator, times(1)).validateHeaderUserId(String.valueOf(payBillInitRequest.getCustomerAccountId()), headers);
        verify(wpsAuthValidator, times(1)).validateHeaderUserId(String.valueOf(validatePayBillInitRequest.getCustomerAccountId()), headers);
        verify(billPaymentService, times(1)).reconcilePendingBillPayTxn(reconcilePendingBillPayTxnRequest, headers);


    }

//    private void executeAndVerifyBillPayment(WPSErrorCodes error, String errorType) throws Exception {
//        MvcResult mvcResult =  mockMvc.perform(MockMvcRequestBuilders.post(FETCH_BILLPAYMENT_INSTRUMENTS)
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content(objectMapper.writeValueAsString(fetchBillPayPaymentInstrumentsRequest))
//                        .headers(HttpHeaders.readOnlyHttpHeaders(headers))
//                        .accept(MediaType.APPLICATION_JSON))
//                .andExpect(MockMvcResultMatchers.status().isBadRequest()).andReturn();
//
//        MvcResult result = mockMvc.perform(asyncDispatch(mvcResult)).andDo(print())
//                .andExpect(Objects.equals(errorType, SERVER_ERROR) ? status().isBadRequest() : status().isOk())
//                .andExpect(jsonPath("$.errors[0].error_code").value(error.getErrorCode())).andReturn();
//
//        Exception ex = result.getResolvedException();
//        String errorMessage = Objects.requireNonNull(ex).getMessage();
//        assertInstanceOf(DataConstraintViolationException.class, result.getResolvedException());
//        assertEquals(errorMessage, CommonUtil2.getErrorMessage(String.valueOf(error.getErrorCode()), error.getErrorMessage()));
//
//    }

    private void executeAndVerifyBillPayment(WPSErrorCodes error, String errorType) throws Exception {
        MvcResult mvcResult = mockMvc.perform(post(FETCH_BILLPAYMENT_INSTRUMENTS)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(fetchBillPayPaymentInstrumentsRequest))
                        .headers(HttpHeaders.readOnlyHttpHeaders(headers))
                        .accept(MediaType.APPLICATION_JSON)).andDo(print()).andExpect(request().asyncStarted())
                .andExpect(MockMvcResultMatchers.status().isBadRequest()).andReturn();

        MvcResult result = mockMvc.perform(asyncDispatch(mvcResult)).andDo(print())
                .andExpect(Objects.equals(errorType, SERVER_ERROR) ? status().isBadRequest() : status().isOk())
                .andExpect(jsonPath("$.errors[0].error_code").value(error.getErrorCode())).andReturn();

        Exception ex = result.getResolvedException();
        String errorMessage = Objects.requireNonNull(ex).getMessage();
        assertInstanceOf(DataConstraintViolationException.class, result.getResolvedException());
        assertEquals(errorMessage, CommonUtil2.getErrorMessage(String.valueOf(error.getErrorCode()), error.getErrorMessage()));

    }

    public HttpHeaders getAddressChangeRequestHeader(
            FetchBillPayPaymentInstrumentsRequest request ) {
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.add(WPSConstants.PaymentInstrument.GIFTCARD, String.valueOf(request.getCustomerAccountId()));
        return httpHeaders;
    }
}

â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦..
WPSErrorCodes:â€¨package com.walmart.international.wallet.payment.core.exception;

import com.walmart.international.digiwallet.service.web.rest.exception.ExceptionConstant;
import com.walmart.international.digiwallet.service.web.rest.exception.ExceptionTypes;
import lombok.Getter;
import org.springframework.http.HttpStatus;

@Getter
public enum WPSErrorCodes implements ExceptionConstant {

    VALIDATION_FAILURE(1000, "Validation Failure", HttpStatus.BAD_REQUEST),
    INVALID_REQUEST(400, "Validation Failure", HttpStatus.BAD_REQUEST),
    PAYMENT_DETAILS_NOT_FOUND(10011, "Payment Details are not present for this request",
            HttpStatus.BAD_REQUEST),
    INVALID_TASK_DATA(10077, "Invalid Task Data", HttpStatus.INTERNAL_SERVER_ERROR);

    private final int errorCode;
    private final String errorMessage;
    private final HttpStatus httpStatus;

    WPSErrorCodes(int errorCode, String errorMessage, HttpStatus httpStatus) {
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
        this.httpStatus = httpStatus;
    }

    @Override
    public ExceptionTypes getExceptionType() {
        return null;
    }
    @Override
    public String getErrorCode() {
        return "";
    }
    @Override
    public HttpStatus getHttpStatus() {
        return null;
    }

}


â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦..
APIUrlConstants.java:â€¨@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class APIUrlConstants {
    //**************  v1 billPay/Biller  **************

    public static final String V1_BASE_URL = "/services/biller-data";
    public static final String BILLER_CATEGORIES_URL = V1_BASE_URL + "/v1/biller/categories";
    public static final String POPULAR_BILLER_URL = V1_BASE_URL + "/v1/biller/popular";
    public static final String BILLER_DATA_UPDATE_INFO_URL = V1_BASE_URL + "/v1/update-info";
    public static final String BILLER_INCORRECT_SEARCH_KEYWORDS_URL = V1_BASE_URL + "/incorrect-search-keywords";
    public static final String EVICT_CACHE_FOR_BILLER_DATA_URL = V1_BASE_URL + "/v1/cache/evict";
    public static final String RELOAD_CACHE_FOR_BILLER_DATA_URL = V1_BASE_URL + "/v1/cache/reload";
    public static final String BILLER_BY_ID_URL = V1_BASE_URL + "/v1/biller/{billerId}";
    public static final String BILLER_PROMOTIONS_URL = V1_BASE_URL + "/v1/biller/promotions";
    public static final String UPDATE_BILLER_BEHAVIOUR_CODE_URL = V1_BASE_URL + "/v1/update/behaviour-code";

    //**************  v1 billPay/BillPayment  **************
    public static final String V1_BILLPAYMENT_BASE_URL = "/services/bill-payment";
    public static final String FETCH_BILLPAYMENT_INSTRUMENTS = V1_BILLPAYMENT_BASE_URL + "/v1/options";
    public static final String FETCH_BILLPAYMENT_INSTRUMENTS_WITH_PRESELECTION = V1_BILLPAYMENT_BASE_URL + "/v2/options";
    public static final String PAYBILL_INIT = V1_BILLPAYMENT_BASE_URL + "/v1/init";
    public static final String CANCEL_PAYBILL_INIT = V1_BILLPAYMENT_BASE_URL + "/v1/cancel-init";
    public static final String VALIDATE_PAYBILL_INIT = V1_BILLPAYMENT_BASE_URL + "/v1/validate-init";

}


â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦..
â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦..
â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦..
â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦..
â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦â€¦..
