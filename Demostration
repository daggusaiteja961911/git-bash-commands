@Test
    void testGetAllPromotionsForPromotionCategory_withValidData() {
        String schoolerCategoryIds = "";
        String processorSchoolerIds = "1,2,3";
        int schoolerCategoryVersion = 1;

        Map<String, List<SchoolerPromotion>> promotions = schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);

        assertNotNull(promotions);
        assertFalse(promotions.isEmpty());
    }

    @Test
    void testGetAllPromotionsForPromotionCategory_withInvalidCategoryId() {
        String schoolerCategoryIds = "invalid-uuid";
        String processorSchoolerIds = "1,2,3";
        int schoolerCategoryVersion = 1;

        assertThrows(ProcessingException.class, () -> {
            schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);
        });
    }

    @Test
    void testGetAllPromotionsForPromotionCategory_withNullIds() {
        String schoolerCategoryIds = null;
        String processorSchoolerIds = null;
        int schoolerCategoryVersion = 1;

        assertThrows(DataValidationException.class, () -> {
            schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);
        });
    }

    @Test
    void testGetAllPromotionsForPromotionCategory_withEmptyPromotions() {
        String schoolerCategoryIds = "";
        String processorSchoolerIds = "4,5,6"; // Assuming these IDs have no promotions
        int schoolerCategoryVersion = 1;

        Map<String, List<SchoolerPromotion>> promotions = schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);

        assertNotNull(promotions);
        assertTrue(promotions.isEmpty());
    }
}
................................................................................


    @Container
    public static MySQLContainer<?> mysql = new MySQLContainer<>("mysql:8.0.26")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    @Autowired
    private SchoolerPromotionCoreService schoolerPromotionCoreService;

    @Autowired
    private CampaignServiceClient campaignServiceClient;

    @Autowired
    private SchoolerCoreService schoolerCoreService;

    @BeforeEach
    void setUp() {
        // Initialize any required data here, possibly using Test Data Builders
    }

    @Test
    void testGetAllPromotionsForPromotionCategory_withValidData() {
        String schoolerCategoryIds = "";
        String processorSchoolerIds = "1,2,3";
        int schoolerCategoryVersion = 1;

        Map<String, List<SchoolerPromotion>> promotions = schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);

        assertNotNull(promotions);
        assertFalse(promotions.isEmpty());
    }

    @ParameterizedTest
    @CsvSource({
        "invalid-uuid, 1,2,3, 1",
        "another-invalid-uuid, 4,5,6, 1"
    })
    void testGetAllPromotionsForPromotionCategory_withInvalidCategoryId(String schoolerCategoryIds, String processorSchoolerIds, int schoolerCategoryVersion) {
        assertThrows(ProcessingException.class, () -> {
            schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);
        });
    }

    @Test
    void testGetAllPromotionsForPromotionCategory_withNullIds() {
        String schoolerCategoryIds = null;
        String processorSchoolerIds = null;
        int schoolerCategoryVersion = 1;

        assertThrows(DataValidationException.class, () -> {
            schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);
        });
    }

    @Test
    void testGetAllPromotionsForPromotionCategory_withEmptyPromotions() {
        String schoolerCategoryIds = "";
        String processorSchoolerIds = "4,5,6"; // Assuming these IDs have no promotions
        int schoolerCategoryVersion = 1;

        Map<String, List<SchoolerPromotion>> promotions = schoolerPromotionCoreService.getAllPromotionsForPromotionCategory(schoolerCategoryIds, processorSchoolerIds, schoolerCategoryVersion);

        assertNotNull(promotions);
        assertTrue(promotions.isEmpty());
    }
}
.................................................................................................

    @Test
    void testSomePublicMethod_withValidData() {
        Map<String, List<PromotionsMappingResponse>> promotionMapFromCaas = new HashMap<>();
        Map<String, List<SchoolerPromotion>> promotionsMap = new HashMap<>();
        String schoolerId = "testSchoolerId";

        List<PromotionsMappingResponse> caasResponses = Arrays.asList(new PromotionsMappingResponse(), new PromotionsMappingResponse());
        promotionMapFromCaas.put(schoolerId, caasResponses);

        List<SchoolerPromotion> schoolerPromotions = Arrays.asList(new SchoolerPromotion(), new SchoolerPromotion());
        when(schoolerPromotionMapper.mapCaasPromotionResponsesToSchoolerPromotions(caasResponses)).thenReturn(schoolerPromotions);

        yourService.somePublicMethod(promotionMapFromCaas, promotionsMap, schoolerId);

        assertTrue(promotionsMap.containsKey(schoolerId));
        assertEquals(1, promotionsMap.get(schoolerId).size());
    }

    @Test
    void testSomePublicMethod_withEmptyPromotionList() {
        Map<String, List<PromotionsMappingResponse>> promotionMapFromCaas = new HashMap<>();
        Map<String, List<SchoolerPromotion>> promotionsMap = new HashMap<>();
        String schoolerId = "testSchoolerId";

        List<PromotionsMappingResponse> caasResponses = Collections.emptyList();
        promotionMapFromCaas.put(schoolerId, caasResponses);

        List<SchoolerPromotion> schoolerPromotions = Collections.emptyList();
        when(schoolerPromotionMapper.mapCaasPromotionResponsesToSchoolerPromotions(caasResponses)).thenReturn(schoolerPromotions);

        yourService.somePublicMethod(promotionMapFromCaas, promotionsMap, schoolerId);

        assertFalse(promotionsMap.containsKey(schoolerId));
    }
}
