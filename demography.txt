import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.mockito.Mockito.*;

import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@SpringBootTest
@AutoConfigureMockMvc
public class SchoolerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private SchoolerService schoolerService;

    @MockBean
    private SchoolerRepository schoolerRepository;

    @MockBean
    private SchoolerCoreService schoolerCoreService;

    @Autowired
    private WebApplicationContext webApplicationContext;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    @Test
    public void testGetSchoolerCategories() throws Exception {
        SchoolerCategoriesResponse mockResponse = new SchoolerCategoriesResponse();
        // Add mock data to mockResponse as needed

        when(schoolerService.getSchoolerCategories(anyInt())).thenReturn(mockResponse);

        mockMvc.perform(get("/services/schooler-data/v1/schooler/categories")
                .param("schoolerCategoryVersion", "1")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testGetPopularSchoolers() throws Exception {
        PopularSchoolersResponse mockResponse = new PopularSchoolersResponse();
        // Add mock data to mockResponse as needed

        when(schoolerService.getPopularSchoolers()).thenReturn(mockResponse);

        mockMvc.perform(get("/services/schooler-data/v1/schooler/popular")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testGetSchoolerById() throws Exception {
        UUID schoolerId = UUID.randomUUID();
        SchoolerDO schoolerDO = new SchoolerDO();
        // Set up schoolerDO properties

        when(schoolerRepository.getBySchoolerId(schoolerId)).thenReturn(Optional.of(schoolerDO));

        mockMvc.perform(get("/services/schooler-data/v1/schooler/{schoolerId}", schoolerId)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testReloadCacheForSchoolerData() throws Exception {
        SchoolerDataCacheReloadRequest request = new SchoolerDataCacheReloadRequest();
        SchoolerDataCacheAlterResponse mockResponse = new SchoolerDataCacheAlterResponse();
        // Add mock data to request and mockResponse as needed

        when(schoolerService.reloadCacheForSchoolerData(any(SchoolerDataCacheReloadRequest.class))).thenReturn(mockResponse);

        mockMvc.perform(put("/services/schooler-data/v1/cache/reload")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ /* JSON request body */ }"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testEvictCacheForSchoolerData() throws Exception {
        SchoolerDataCacheEvictRequest request = new SchoolerDataCacheEvictRequest();
        SchoolerDataCacheAlterResponse mockResponse = new SchoolerDataCacheAlterResponse();
        // Add mock data to request and mockResponse as needed

        when(schoolerService.evictCacheForSchoolerData(any(SchoolerDataCacheEvictRequest.class))).thenReturn(mockResponse);

        mockMvc.perform(post("/services/schooler-data/v1/cache/evict")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ /* JSON request body */ }"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    // Add more tests for other endpoints similarly
}
.................................................
import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

@SpringBootTest
@ActiveProfiles("test") // Use a separate profile for testing
@Transactional // Rollback transactions after each test
public class SchoolerRepositoryIntegrationTest {

    @Autowired
    private SchoolerRepository schoolerRepository;

    @Test
    public void testGetBySchoolerId() {
        // Given
        UUID schoolerId = UUID.randomUUID();
        SchoolerDO schooler = new SchoolerDO();
        schooler.setSchoolerId(schoolerId);
        schooler.setEnabled(true);
        schoolerRepository.save(schooler);

        // When
        Optional<SchoolerDO> foundSchooler = schoolerRepository.getBySchoolerId(schoolerId);

        // Then
        assertThat(foundSchooler).isPresent();
        assertThat(foundSchooler.get().getSchoolerId()).isEqualTo(schoolerId);
    }

    @Test
    public void testGetPopularSchoolersAndSubSchoolers() {
        // Given
        SchoolerDO schooler = new SchoolerDO();
        schooler.setPopularSchoolerSequenceNumber(1);
        schoolerRepository.save(schooler);

        // When
        List<SchoolerDO> popularSchoolers = schoolerRepository.getPopularSchoolersAndSubSchoolers();

        // Then
        assertThat(popularSchoolers).isNotEmpty();
        assertThat(popularSchoolers.get(0).getPopularSchoolerSequenceNumber()).isGreaterThan(0);
    }

    // Add more tests for other repository methods similarly
}
..................................................
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.mockito.Mockito.*;

import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@SpringBootTest
@AutoConfigureMockMvc
public class SchoolerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private SchoolerService schoolerService;

    @MockBean
    private SchoolerRepository schoolerRepository;

    @MockBean
    private SchoolerCoreService schoolerCoreService;

    @Autowired
    private WebApplicationContext webApplicationContext;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    @Test
    public void testGetSchoolerCategories() throws Exception {
        SchoolerCategoriesResponse mockResponse = new SchoolerCategoriesResponse();
        // Add mock data to mockResponse as needed

        when(schoolerService.getSchoolerCategories(anyInt())).thenReturn(mockResponse);

        mockMvc.perform(get("/services/schooler-data/v1/schooler/categories")
                .param("schoolerCategoryVersion", "1")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testGetPopularSchoolers() throws Exception {
        PopularSchoolersResponse mockResponse = new PopularSchoolersResponse();
        // Add mock data to mockResponse as needed

        when(schoolerService.getPopularSchoolers()).thenReturn(mockResponse);

        mockMvc.perform(get("/services/schooler-data/v1/schooler/popular")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testGetSchoolerById() throws Exception {
        UUID schoolerId = UUID.randomUUID();
        SchoolerDO schoolerDO = new SchoolerDO();
        // Set up schoolerDO properties

        when(schoolerRepository.getBySchoolerId(schoolerId)).thenReturn(Optional.of(schoolerDO));

        mockMvc.perform(get("/services/schooler-data/v1/schooler/{schoolerId}", schoolerId)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testReloadCacheForSchoolerData() throws Exception {
        SchoolerDataCacheReloadRequest request = new SchoolerDataCacheReloadRequest();
        SchoolerDataCacheAlterResponse mockResponse = new SchoolerDataCacheAlterResponse();
        // Add mock data to request and mockResponse as needed

        when(schoolerService.reloadCacheForSchoolerData(any(SchoolerDataCacheReloadRequest.class))).thenReturn(mockResponse);

        mockMvc.perform(put("/services/schooler-data/v1/cache/reload")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ /* JSON request body */ }"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testEvictCacheForSchoolerData() throws Exception {
        SchoolerDataCacheEvictRequest request = new SchoolerDataCacheEvictRequest();
        SchoolerDataCacheAlterResponse mockResponse = new SchoolerDataCacheAlterResponse();
        // Add mock data to request and mockResponse as needed

        when(schoolerService.evictCacheForSchoolerData(any(SchoolerDataCacheEvictRequest.class))).thenReturn(mockResponse);

        mockMvc.perform(post("/services/schooler-data/v1/cache/evict")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ /* JSON request body */ }"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    // Add more tests for other endpoints similarly
}
...............................
import static org.mockito.BDDMockito.given;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.transaction.annotation.Transactional;

@SpringBootTest
public class SchoolerRepositoryTests {

    @Autowired
    private SchoolerRepository schoolerRepository;

    @Autowired
    private SchoolerService schoolerService;

    @MockBean
    private ExternalDependencyService externalDependencyService;

    @Test
    @Transactional
    public void schoolerServiceIntegrationTest(List<SchoolerDO> inputSchoolerList, List<UUID> schoolerIds, List<SchoolerDO> expectedSchoolerList, List<Integer> externalDependencyFunctionInput, List<Integer> externalDependencyFunctionOutput) throws Exception {
        // Save initial data
        schoolerRepository.saveAll(inputSchoolerList);

        // Mock external service behavior
        given(externalDependencyService.functionName(externalDependencyFunctionInput)).willReturn(externalDependencyFunctionOutput);

        // Process data through the service
        schoolerService.processSchoolers(schoolerIds);

        // Retrieve and verify the processed data
        List<SchoolerDO> actualSchoolerList = schoolerRepository.findAll();
        assertThat(expectedSchoolerList).containsExactlyInAnyOrderElementsOf(actualSchoolerList);
    }

    @AfterEach
    public void clearData() {
        // Clear the schooler data after each test case
        schoolerRepository.deleteAll();
    }
}
...........................................................
import static org.assertj.core.api.Assertions.assertThat;

import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

@SpringBootTest
@ActiveProfiles("test")
@Transactional
public class SchoolerRepositoryIntegrationTest {

    @Autowired
    private SchoolerRepository schoolerRepository;

    @Test
    public void testSaveAndFindById() {
        // Given
        UUID schoolerId = UUID.randomUUID();
        SchoolerDO schooler = new SchoolerDO();
        schooler.setSchoolerId(schoolerId);
        schooler.setEnabled(true);
        schoolerRepository.save(schooler);

        // When
        Optional<SchoolerDO> foundSchooler = schoolerRepository.getBySchoolerId(schoolerId);

        // Then
        assertThat(foundSchooler).isPresent();
        assertThat(foundSchooler.get().getSchoolerId()).isEqualTo(schoolerId);
    }
}
.............
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
...................